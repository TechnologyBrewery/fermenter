package ${basePackage}.transfer;

import org.bitbucket.fermenter.transfer.AbstractTransferObjectFactory;
import org.bitbucket.fermenter.transfer.PrimaryKey;
import org.bitbucket.fermenter.transfer.TransferObject;

public class TransferObjectFactory extends AbstractTransferObjectFactory {

	private static TransferObjectFactoryInterface getTransferObjectFactory() {
		return (TransferObjectFactoryInterface) AbstractTransferObjectFactory.getAbstractTransferObjectFactory(TransferObjectFactory.class);
	}
	
	public static TransferObject createTransferObject(String type) {
		return getTransferObjectFactory().createTransferObject( type );
	}
	
	public static PrimaryKey createPrimaryKey(String type) {
		return getTransferObjectFactory().createPrimaryKey( type );
	}

#foreach( $entity in $entities )
	/**
	 * Create a(n) ${entity.name} transfer object instance
	 */
	public static ${entity.name} create${entity.name}() {
		return getTransferObjectFactory().create${entity.name}();
	}
	
	/**
	 * Create a(n) ${entity.name} primary key instance
	 */
	public static ${entity.name}PK create${entity.name}PK() {
		return getTransferObjectFactory().create${entity.name}PK();
	}
	
#end
}