package ${basePackage}.transfer;

#foreach($import in ${composite.imports})
import ${import};
#end
import org.bitbucket.fermenter.messages.Messages;
import org.bitbucket.fermenter.messages.MessagesSet;
import org.bitbucket.fermenter.transfer.AbstractTransferComponent;
import org.apache.commons.lang3.StringUtils;

/**
 * Composite transfer object class for the ${composite.type} composite
 *
 * Generated Code - DO NOT MODIFY
 */
public class ${composite.type}Composite extends AbstractTransferComponent {

#foreach ( $field in ${composite.fields} )
	private ${field.javaType} ${field.name};
#end

#foreach ( $field in ${composite.fields} )

	/**
	 * Get the ${field.label}
	 *
	 * @return The ${field.label}
	 */
	public ${field.javaType} get${field.capitalizedName}() {
		return ${field.name};
	}
	
	/**
	 * Set the ${field.label}
	 *
	 * @param ${field.type} The ${field.label}
	 */
	public void set${field.capitalizedName}(${field.javaType} ${field.name}) {
#if ($field.getJavaType().equals("String"))
		${field.name} = StringUtils.trimToNull(${field.name});
#end		
		this.${field.name} = ${field.name};
	}
	
#end

	// The methods below will need to be implemented if composites
	// ever support children.

	public final Messages getAllMessages() {
		return getMessages();
	}
	
	protected void gatherMessages(MessagesSet set) {}

}
