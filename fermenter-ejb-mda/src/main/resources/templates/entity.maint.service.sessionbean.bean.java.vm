package ${basePackage}.service.ejb;

#foreach( $import in $service.imports )
import $import;
#end

import ${basePackage}.transfer.${entity.name};
import ${basePackage}.transfer.${entity.name}PK;
import com.ask.test.domain.transfer.TransferObjectFactory;
import ${basePackage}.bizobj.BusinessObjectFactory;
import ${basePackage}.bizobj.${entity.name}Assembler;
import ${basePackage}.bizobj.${entity.name}BO;

import javax.annotation.Resource;

import javax.ejb.Local;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;

import javax.inject.Inject;

import org.tigris.atlas.service.ValueServiceResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ${basePackage}.service.ejb.${entity.name}MaintenanceService;

/**
 * Implementation of an EJB for create, retrieve, update, and delete (CRUD) for ${entity.name}.
 *
 * Generated Code - DO NOT MODIFY
 */
 @Local(${entity.name}MaintenanceService.class)
 @Stateless
public class ${entity.name}MaintenanceServiceBean implements ${entity.name}MaintenanceService {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(${entity.name}MaintenanceServiceBean.class);
	
	private ${entity.name}Assembler assembler = new ${entity.name}Assembler();
	
	@Inject
	private ${entity.name}BO seed${entity.name}BO;
	
	@Resource
	private SessionContext sessionContext;
	
	/**
	 * {@inheritDoc}
	 */
	public ValueServiceResponse<${entity.name}> saveOrUpdate(#foreach($id in $entity.idFields)${id.javaType} ${id.name}#end, ${entity.name} entity) {
		if ((#foreach($id in $entity.idFields)${id.name}#end != null) && (entity != null)) {
			//make sure whatever is being saved is has the passed pk value:
			${entity.name}PK pk = entity.get${entity.name}PK();
			pk.set#foreach($id in $entity.idFields)${id.capitalizedName}#end(#foreach($id in $entity.idFields)${id.name}#end);
			entity.setKey(pk);
		}
		
		return saveOrUpdate(entity);
		
	}
	
	/**
	 *{@inheritDoc}
	 */
	@TransactionAttribute(TransactionAttributeType.REQUIRED)
	public ValueServiceResponse<${entity.name}> saveOrUpdate(${entity.name} entity) {
		LOGGER.debug("Executing ${entity.name}.saveOrUpdate");
		ValueServiceResponse<${entity.name}> response = null;
		
		if (entity != null) {
			${entity.name}PK pk = entity.get${entity.name}PK();
			${entity.name}BO businessObjectToSave = null;
			${entity.name}BO retrievedBusinessObject = ${entity.name}BO.findByPrimaryKey(pk);
			
			if (retrievedBusinessObject != null) {
				businessObjectToSave = retrievedBusinessObject;				
				
			} else {
				businessObjectToSave = BusinessObjectFactory.create${entity.name}BO();
				
			}
			
			assembler.update${entity.name}BO(entity, businessObjectToSave);
			
			businessObjectToSave.save();
			
			//TODO: handle error messages
			
			${entity.name} updateEntity = assembler.create${entity.name}(businessObjectToSave);
			
			response = new ValueServiceResponse<${entity.name}>();
			response.setValue(updateEntity);
			
		}
		
		return response;
	}
	
	/**
	 * {@inheritDoc}
	 */
	public ValueServiceResponse<${entity.name}> delete(#foreach($id in $entity.idFields)${id.javaType} ${id.name}#end) {
		${entity.name}PK pk = TransferObjectFactory.create${entity.name}PK();
#foreach($id in $entity.idFields)
		pk.set${id.capitalizedName}(${id.name});
#end
		return delete(pk);
		
	}	
	 
	/**
	 * {@inheritDoc}
	 */
	public ValueServiceResponse<${entity.name}> delete(${entity.name}PK pk) {
		LOGGER.debug("Executing ${entity.name}.delete");
		${entity.name}BO businessObjectToDelete = BusinessObjectFactory.create${entity.name}BO();
		businessObjectToDelete.setKey(pk);
		businessObjectToDelete.delete();
		
		//TODO: handle messages
		
		return new ValueServiceResponse<${entity.name}>();
	}
	
	/**
	 * {@inheritDoc}
	 */
	public ValueServiceResponse<${entity.name}> findByPrimaryKey(#foreach($id in $entity.idFields)${id.javaType} ${id.name}#end) {
		${entity.name}PK pk = TransferObjectFactory.create${entity.name}PK();
#foreach($id in $entity.idFields)
		pk.set${id.capitalizedName}(${id.name});
#end
		return findByPrimaryKey(pk);
		
	}	

	/**
	 * Find the ${entity.name} by primary key fields.
	 *
	 * @param pk The primary key for the ${entity.name}
	 * @return ${entity.name}ServiceResponse The retrieved ${entity.name} container
	 */
	public ValueServiceResponse<${entity.name}> findByPrimaryKey(${entity.name}PK pk) {
		LOGGER.debug("Executing ${entity.name}.findByPrimaryKey");
		${entity.name} retrieveEntity = null;
		
		${entity.name}BO retrievedBusinessObject = ${entity.name}BO.findByPrimaryKey(pk);
		if (retrievedBusinessObject != null) {
			retrieveEntity = assembler.create${entity.name}(retrievedBusinessObject);
			
		}
		
		//TODO: handle messages
		
		ValueServiceResponse<${entity.name}> response = new ValueServiceResponse<${entity.name}>();
		response.setValue(retrieveEntity);
		
		return response;
	}

}