package ${basePackage}.client.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.inject.Inject;
import javax.transaction.RollbackException;
import javax.transaction.Synchronization;
import javax.transaction.SystemException;
import javax.transaction.Transaction;
import javax.transaction.TransactionManager;

import org.aeonbits.owner.KrauseningConfigFactory;
import org.apache.commons.lang3.StringUtils;
import org.bitbucket.fermenter.stout.client.service.AbstractMaintenanceServiceDelegate;
import org.bitbucket.fermenter.stout.client.service.CustomFlushOrderProvider;
import org.bitbucket.fermenter.stout.exception.UnrecoverableException;
import org.bitbucket.fermenter.stout.util.SpringAutowiringUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.jta.JtaTransactionManager;

import ${basePackage}.client.config.CachePropertiesConfig;

/**
 * Performs transaction synchronization across deletes for the current project while respecting the inherent ordering
 * needed to persist references and relations in an order that will not produce constraint violations.
 *
 * Generated Code - DO NOT MODIFY
 * Generated from delegate.maintenance.tx.synchronization.java.vm
 */
public class DelegateMaintenanceTransactionSynchronization implements Synchronization {
    
    private static final Logger logger = LoggerFactory.getLogger(DelegateMaintenanceTransactionSynchronization.class);
    
    private static final CachePropertiesConfig config = KrauseningConfigFactory.create(CachePropertiesConfig.class);
   	private static List<String> flushOrder = determineFlushOrder();
   	private static List<String> flushReverseOrder = reverseFlushOrder();	

	private static Map<Transaction, Map<String, AbstractMaintenanceServiceDelegate>> delegatesByTransaction = new ConcurrentHashMap<>();
	private static Map<Transaction, Map<Class<? extends Synchronization>, Synchronization>> synchronizationRegisteredByTransaction = new ConcurrentHashMap<>();

	@Inject
	private JtaTransactionManager springTxManager;

	/**
	 * New instance.
	 */
	public DelegateMaintenanceTransactionSynchronization() {
		SpringAutowiringUtil.autowireBizObj(this);
	}
	
    private static CustomFlushOrderProvider loadCustomFlushOrder() {
        CustomFlushOrderProvider customProvider = null;

        String className = config.getCustomFlushOrderProvider();
        if (StringUtils.isNotBlank(className)) {
            try {
                Class<?> customFlushOrderClass = Class.forName(className);
                customProvider = (CustomFlushOrderProvider) customFlushOrderClass.newInstance();

                logger.info("Loaded custom flush order provider {}", className);

            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {
                logger.error("Could not load custom flush order provider " + className, e);
            }
        }

        return customProvider;
    }	
	
	private static List<String> determineFlushOrder() {
		CustomFlushOrderProvider customFlushProvider = loadCustomFlushOrder();		
		List<String> flushOrder = (customFlushProvider != null) ? customFlushProvider.getCustomFlushOrder() : new ArrayList<>();
		
#foreach( $entity in $entities )
	#if (!$entity.isTransient() && !$entity.isNonPersistentParentEntity())
		addIfNew(flushOrder, "${entity.name}");
	#end
#end		
		
		if (customFlushProvider != null) {
			logger.debug("Calculated Flush Order based on input from {}:", customFlushProvider.getClass().getName());
			for (String entityName : flushOrder) {
				logger.debug("\t{}", entityName);
			}
		}
		
		return flushOrder;
	}
	
    private static void addIfNew(List<String> flushOrder, String entityName) {
        if (!flushOrder.contains(entityName)) {
            flushOrder.add(entityName);
        }
    }
    
    private static List<String> reverseFlushOrder() {
        List<String> flushOrderCopy = new ArrayList<>(flushOrder.size());
        flushOrderCopy.addAll(flushOrder);
        Collections.reverse(flushOrderCopy);
        return flushOrderCopy;
    }    

    /**
     * Flushes all inserts and updates via the computed flush order, then reverses the flush order and processes all
     * deletes.  This allows referential integrity to be respected in both scenarios.
     */
	public void flush() {
		Transaction transaction = getCurrentTransaction();
	    
	    if (transaction != null) {	   
			logger.trace("START: flush maintenance operations for tx {}", transaction);
		    Map<String, AbstractMaintenanceServiceDelegate> delegates = delegatesByTransaction.get(transaction);
		    
			// flush each delegate in order such that referential integrity is respected:
		    if (delegates != null) {
			    // first process inserts and updates:
	    	    for (String entityToFlush: flushOrder) {
	    	        AbstractMaintenanceServiceDelegate delegate = delegates.get(entityToFlush);
	    	        if (delegate != null) {
	    	        	logger.trace("Flushing inserts and updates for entity: {}", entityToFlush);
	    	        	delegate.flushInsertsAndUpdates();
	    	        }
	    	    }
	    	    
	            // then reverse the order and process deletes:
	            for (String entityToFlush : flushReverseOrder) {
	                AbstractMaintenanceServiceDelegate delegate = delegates.get(entityToFlush);
	                if (delegate != null) {
	                	logger.trace("Flushing deletes for entity: {}", entityToFlush);
	                    delegate.flushDeletes();
	                }
	            }
	            
	            // now that we have cleared things, remove the delegate from our collection of delegates waiting for a flush:
	            delegates.clear();   
	            
	            logger.trace("STOP: flush maintenance operations completed");
		    }
		    
		} else {
	        logger.warn("No active transaction - flush is only active within a transaction!");
	        
	    }
    	   
	}

	void synchronizeTransaction(String entityName, AbstractMaintenanceServiceDelegate relatedDelegate) {
		if (!isSynchronizationRegisteredForCurrentTransaction(this.getClass())) {
			registerSynchronization(this);
		}
		
		Transaction transaction = getCurrentTransaction();
		Map<String, AbstractMaintenanceServiceDelegate> delegatesInThisTransaction = delegatesByTransaction.get(transaction);
		if (delegatesInThisTransaction == null) {
		    delegatesInThisTransaction = new ConcurrentHashMap<>();
		    delegatesByTransaction.put(transaction, delegatesInThisTransaction);
		}
		
		delegatesInThisTransaction.put(entityName, relatedDelegate);
	}

    /**
     * {@inheritDoc}
     */
	@Override
	public void beforeCompletion() {		
		flush();
		removeTransaction();

	}

    /**
     * Flushes this transaction's pending rest client operations, then removes the transactional tracking for the rest client
     * associated with this transaction.
     *
     * {@inheritDoc}
     */
	@Override
	public void afterCompletion(int status) {
		if (logger.isTraceEnabled()) {
			logger.trace("Transaction completed for tx {}", getCurrentTransaction());
		}
	}

	private Transaction getCurrentTransaction() {
		Transaction currentTransaction = null;
		try {
			if (springTxManager == null) {
				SpringAutowiringUtil.autowireBizObj(this);

			}
			
			if (springTxManager == null) {
			    logger.debug("Transaction manager is not available!");
			    
			} else {
				TransactionManager transactionManager = springTxManager.getTransactionManager();
				currentTransaction = transactionManager.getTransaction();
			}

		} catch (SystemException e) {
			throw new UnrecoverableException("Could not get transaction for current thread!", e);

		}
		return currentTransaction;
	}

	/**
	 * Checks if a specific entity maintenance {@link Synchronization} object has been registered with the current
	 * transaction.
	 * 
	 * @param synchronizationClass
	 *            class for which to check the binding
	 * @return true if bound, false otherwise
	 */
	public boolean isSynchronizationRegisteredForCurrentTransaction(
			Class<? extends Synchronization> synchronizationClass) {
		Map<Class<? extends Synchronization>, Synchronization> synchonizationsForTx = getSynchronizationsForCurrentTransaction();
		if (synchonizationsForTx == null) {
			synchonizationsForTx = new HashMap<>();
			synchronizationRegisteredByTransaction.put(getCurrentTransaction(), synchonizationsForTx);
		}
		return synchonizationsForTx.containsKey(synchronizationClass);

	}

	protected Map<Class<? extends Synchronization>, Synchronization> getSynchronizationsForCurrentTransaction() {
		Transaction currentTransaction = getCurrentTransaction();
		return synchronizationRegisteredByTransaction.get(currentTransaction);
	}

	/**
	 * Registers a new {@link Synchronization} that will be called back on transaction completion to mechanize the
	 * flushing of the level one cache.
	 * 
	 * @param synchronization
	 *            the callback class
	 */
	public void registerSynchronization(Synchronization synchronization) {
		try {
			Transaction currentTransaction = getCurrentTransaction();
			currentTransaction.registerSynchronization(synchronization);
			Map<Class<? extends Synchronization>, Synchronization> synchonizationsForTx = synchronizationRegisteredByTransaction
					.get(currentTransaction);
			synchonizationsForTx.put(synchronization.getClass(), synchronization);

		} catch (IllegalStateException | RollbackException | SystemException e) {
			throw new UnrecoverableException("Could not register a synchronization!", e);

		}
	}

	/**
	 * Removes all level one caches bound to the current transaction.
	 */
	private void removeTransaction() {
		Transaction currentTransaction = getCurrentTransaction();
		delegatesByTransaction.remove(currentTransaction);
		synchronizationRegisteredByTransaction.remove(currentTransaction);

	}

}
