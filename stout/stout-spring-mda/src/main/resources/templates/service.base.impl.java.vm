package ${basePackage}.service.impl;

#foreach( $import in $service.imports )
import $import;
#end

import javax.inject.Inject;

import org.bitbucket.fermenter.stout.authz.Action;

import org.bitbucket.fermenter.stout.messages.AbstractMsgMgrAwareService;
import org.bitbucket.fermenter.stout.messages.DefaultMessages;

import org.bitbucket.fermenter.stout.service.ValueServiceResponse;
import org.bitbucket.fermenter.stout.service.VoidServiceResponse;

import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;

import ${basePackage}.service.rest.${service.name}Service;

/**
 * Service implementation class for the ${service.name} service
 * @see ${basePackage}.service.rest.${service.name}Service
 */ 
public abstract class ${service.name}BaseServiceImpl extends AbstractMsgMgrAwareService implements ${service.name}Service {

	@Inject
	protected DefaultMessages messages;
	
#foreach( $operation in $service.operations )
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.${operation.transactionAttribute})
	@Override
	#if($operation.return.isMany())	 
	public ValueServiceResponse<Collection<${operation.return.javaType}>> ${operation.uncapitalizedName}(${operation.signature}) {
	#elseif($operation.isResponseTypeVoid())
	public VoidServiceResponse ${operation.uncapitalizedName}(${operation.signature}) {
	#else 
	public ValueServiceResponse<${operation.return.javaType}> ${operation.uncapitalizedName}(${operation.signature}) {
	#end
		initMsgMgr(messages);
		assertAuthorization(PATH + "/${operation.uncapitalizedName}", Action.EXECUTE);
	
		
	#if( $operation.return.isMany() )
		Collection<${operation.return.javaType}> result =
	#elseif( $operation.isResponseTypeVoid() )
	#else
		${operation.return.javaType} result =
	#end
		${operation.uncapitalizedName}Impl(
	#foreach( $parameter in $operation.parameters )			
		${parameter.name} #if( $foreach.hasNext ),#end
	#end
		);
		
	#if($operation.return.isMany())
		ValueServiceResponse<Collection<${operation.return.javaType}>> response = new ValueServiceResponse<>(result);
	#elseif( $operation.isResponseTypeVoid() )
		VoidServiceResponse response = new VoidServiceResponse();
	#else
		ValueServiceResponse<${operation.return.javaType}> response = new ValueServiceResponse<>(result);
	#end
	
		addAllMsgMgrToResponse(response);
		return response;
	}
	
	/**
	 * Performs the business function for ${operation.name}.
	#if( $operation.parameters.size() > 0 )
		#foreach( $parameter in $operation.parameters )
			#if( $parameter.documentation )
	 * @param ${parameter.name} ${parameter.documentation}
			#else
	 * @param ${parameter.name}  
			#end
		#end
	#end
	#if($operation.return.isMany())	 
	 * @return A {@link Collection} of {@link ${operation.returnManyTypeAsBO}}
	#elseif($operation.isResponseTypeVoid()) 	 
	 * @return A instance of {@link ${operation.returnManyTypeAsBO}}
	#end
	 */
	#if($operation.return.isMany())	 
	protected abstract Collection<${operation.return.javaType}> ${operation.uncapitalizedName}Impl(${operation.signature});
	#elseif($operation.isResponseTypeVoid())
	protected abstract void ${operation.uncapitalizedName}Impl(${operation.signature});
	#else
	protected abstract ${operation.return.javaType} ${operation.uncapitalizedName}Impl(${operation.signature});
	#end 
 
#end

}
