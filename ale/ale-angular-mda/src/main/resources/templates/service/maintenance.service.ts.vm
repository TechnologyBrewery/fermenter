import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Observable } from 'rxjs';
import { Constants } from '../../../constants';

import { ${entity.name} } from '../../../shared/model/${entity.nameLowerHyphen}.model';
import { FermenterResponse } from '../../../shared/model/fermenter-response.model';
import { GlobalErrorHandler } from '../../../shared/global-error-handler.service';
import { FindByExampleCriteria } from '../../../shared/model/find-by-example-criteria.model';
import { PageWrapper } from '../../../shared/model/page-wrapper.model';
import { BusinessError } from '../../../generated/business-error.model';

/*******************************************************
 * Maintenance (CRUD) services for ${entity.name}
 *
 * Generated Code - DO NOT MODIFY
 * Template = maintenance.service.ts.vm
 *******************************************************/

@Injectable({
  providedIn: 'root'
})
export class ${entity.name}MaintenanceService {
  protected ${entity.name}URL: string;
  protected constants = new Constants();

  constructor(
    protected http: HttpClient,
    protected errorHandler: GlobalErrorHandler
  ) {
    // be sure to define the applicaiton endpoint in the constants.ts file
    this.${entity.name}URL =
      this.constants.${entity.applicationNameUpperUnderscore}_END_POINT + '/${entity.name}';
  }

  /**
   * Will retrieve the entity based on ID.
   *
   * @param id - the identifier of the entity that you want to get
   */
  public get(id: string, skipGlobalErrorHandler = false): Observable<${entity.name}> {
    const url = this.${entity.name}URL + '/' + id;

    return this.http.get<FermenterResponse<${entity.name}>>(url).pipe(
      map((response: FermenterResponse<${entity.name}>) => {
        const fermenterResponse = this.parseResponseToSingle(response);
        if (fermenterResponse.messages.hasErrorMessages() && !skipGlobalErrorHandler) {
          throw new BusinessError(fermenterResponse.messages);
        }
        return fermenterResponse.value;
      }),
      catchError(error => this.errorHandler.handleServiceCallError(error))
    );
  }

  /**
   * Will save or update the entity using PUT
   *
   * @param id - the identifier of the entity that you want to PUT
   * @param ${entity.nameLowerCamel} - entity that you want to save/update
   */
  public put(
    id: string,
    ${entity.nameLowerCamel}: ${entity.name},
    skipGlobalErrorHandler = false
  ): Observable<FermenterResponse<${entity.name}>> {
    const url = this.${entity.name}URL + '/' + id;

    return this.http
      .put<FermenterResponse<${entity.name}>>(url, ${entity.nameLowerCamel})
      .pipe(
        map((response: FermenterResponse<${entity.name}>) => {
          const fermenterResponse = this.parseResponseToSingle(response);
          if (fermenterResponse.messages.hasErrorMessages() && !skipGlobalErrorHandler) {
            throw new BusinessError(fermenterResponse.messages);
          }
          return fermenterResponse;
        }),
        catchError(error => this.errorHandler.handleServiceCallError(error))
      );
  }

  /**
   * Will save or update the entity using POST
   *
   * @param ${entity.nameLowerCamel} - entity that you want to save/update
   */
  public post(
    ${entity.nameLowerCamel}: ${entity.name},
    skipGlobalErrorHandler = false
  ): Observable<FermenterResponse<${entity.name}>> {
    const url = this.${entity.name}URL;

    return this.http
      .post<FermenterResponse<${entity.name}>>(url, ${entity.nameLowerCamel})
      .pipe(
        map((response: FermenterResponse<${entity.name}>) => {
          const fermenterResponse = this.parseResponseToSingle(response);
          if (fermenterResponse.messages.hasErrorMessages() && !skipGlobalErrorHandler) {
            throw new BusinessError(fermenterResponse.messages);
          }
          return fermenterResponse;
        }),
        catchError(error => this.errorHandler.handleServiceCallError(error))
      );
  }

  /**
   * Will delete the entity using DELETE
   *
   * @param id - the id of the entity that you want to delete
   */
  public delete(id: string, skipGlobalErrorHandler = false): Observable<FermenterResponse<${entity.name}>> {
    const url = this.${entity.name}URL + '/' + id;

    return this.http.delete<FermenterResponse<${entity.name}>>(url).pipe(
      map((response: FermenterResponse<${entity.name}>) => {
        const fermenterResponse = new FermenterResponse<${entity.name}>(response);
        if (fermenterResponse.messages.hasErrorMessages() && !skipGlobalErrorHandler) {
          throw new BusinessError(fermenterResponse.messages);
        }
        return fermenterResponse;
      }),
      catchError(error => this.errorHandler.handleServiceCallError(error))
    );
  }

  /**
   * Will find entities based on the example provided
   *
   * @param findByExampleCriteria - an instance of the FindByExampleCriteria that should be used for the search
   */
  public findByExample(
    findByExampleCriteria: FindByExampleCriteria<${entity.name}>,
    skipGlobalErrorHandler = false
  ): Observable<PageWrapper<${entity.name}>> {
    const url = this.${entity.name}URL + '/findByExample';

    return this.http
      .post<FermenterResponse<PageWrapper<${entity.name}>>>(url, findByExampleCriteria)
      .pipe(
        map((response: FermenterResponse<PageWrapper<${entity.name}>>) => {
          const fermenterResponse = this.parseResponseToPageWrapper(response);
          if (fermenterResponse.messages.hasErrorMessages() && !skipGlobalErrorHandler) {
            throw new BusinessError(fermenterResponse.messages);
          }
          return fermenterResponse.value;
        }),
        catchError(error => this.errorHandler.handleServiceCallError(error))
      );
  }

  protected parseResponseToPageWrapper(
    response: FermenterResponse<PageWrapper<${entity.name}>>
  ): FermenterResponse<PageWrapper<${entity.name}>> {
    const fermenterResponse = new FermenterResponse<PageWrapper<${entity.name}>>(response);
    this.checkFermenterResponseIsInitialized(response);

    const pageWrapper = new PageWrapper<${entity.name}>(response.value);

    const ${entity.nameLowerCamel}s = new Array<${entity.name}>();
    for (const ${entity.nameLowerCamel} of response.value.content) {
      ${entity.nameLowerCamel}s.push(new ${entity.name}(${entity.nameLowerCamel}));
    }

    pageWrapper.content = ${entity.nameLowerCamel}s;
    fermenterResponse.value = pageWrapper;

    return fermenterResponse;
  }

  protected parseResponseToSingle(
    response: FermenterResponse<${entity.name}>
  ): FermenterResponse<${entity.name}> {
    const fermenterResponse = new FermenterResponse(response);
    this.checkFermenterResponseIsInitialized(fermenterResponse);

    if (response.value) {
      fermenterResponse.value = new ${entity.name}(response.value);
    }

    return fermenterResponse;
  }

  private checkFermenterResponseIsInitialized(fermenterResponse: FermenterResponse<{}>) {
    if (!fermenterResponse) {
      const msg = 'Failed to initialize fermenter response for service call.';
      this.errorHandler.handleServiceCallError(msg);
      throw new Error(msg);
    }
  }
}
