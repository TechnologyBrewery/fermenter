package ${prefix}.transfer.json;

import org.codehaus.jackson.Version;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.module.SimpleModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.tigris.atlas.messages.DefaultMessage;
import org.tigris.atlas.messages.DefaultMessages;
import org.tigris.atlas.messages.Message;
import org.tigris.atlas.messages.Messages;
import org.tigris.atlas.messages.json.MessagesMixIn;

import ${prefix}.transfer.*;

/**
 * Manages and customizes the Jackson {@link ObjectMapper} instance for this project.
 */
public final class ObjectMapperManager {

	private final static Logger LOGGER = LoggerFactory.getLogger(ObjectMapperManager.class);
	
	private static ObjectMapper objectMapper;
	
	static {
		objectMapper = new ObjectMapper();
		configureObjectMapper();
	}
	
	private ObjectMapperManager() {
		//prevent instantiation
	}
	
	/**
	 * Adds in any custom modules desired for this project's {@link ObjectMapper}.
	 */
	private static void configureObjectMapper() {
		SimpleModule module = new SimpleModule("${groupId}:${artifactId}:${version}", new Version(1, 9, 2, ""));
#foreach( $entity in $entities )		
		module.setMixInAnnotation(${entity.name}.class, ${entity.name}MixIn.class);
		LOGGER.debug("Configured Jackson of Class/MixIn combination: ${entity.name}=${entity.name}MixIn");
#end
		
		module.addAbstractTypeMapping(Message.class, DefaultMessage.class);
		LOGGER.debug("Configured Jackson of Interface/Concrete class mapping: Message->DefaultMessage");
		module.addAbstractTypeMapping(Messages.class, DefaultMessages.class);
		LOGGER.debug("Configured Jackson of Interface/Concrete class mapping: Messages->DefaultMessages");
		module.setMixInAnnotation(Messages.class, MessagesMixIn.class);
		LOGGER.debug("Configured Jackson of Class/MixIn combination: Messages=MessagesMixIn");
		
		module.setMixInAnnotation(Messages.class, MessagesMixIn.class);
		LOGGER.debug("Configured Jackson of Class/MixIn combination: Messages=MessagesMixIn");
		
		objectMapper.registerModule(module);
		
	}
	
	/**
	 * Returns the thread-safe, singleton instance of {@link ObjectMapper} for this project.
	 * @return object mapper
	 */
	public static ObjectMapper getObjectMapper() {
		return objectMapper;
	}
	
}
