package ${basePackage}.enumeration;

#foreach ($import in $imports )
import ${import};
#end

import java.util.*;
#if ($enumeration.isNamed())
import org.apache.commons.lang.enums.Enum;
#else 
import org.apache.commons.lang.enums.ValuedEnum;
#end

/**
 * Enumeration ${enumeration.name} 
 *
#if ($enumeration.isNamed())
 * These instances are NOT safe for a switch statement.  Use a valued enumeration if you 
 * desire this behavior
#else 
 * These instances ARE safe for use in a switch statement.
#end
 * 
 * Generated Code - DO NOT MODIFY
 * 		- Group Id: ${groupId}
 * 		- Artifact Id: ${artifactId}
 * 		- Version: ${version}
 * 		- Enumeration file name: ${enumeration.name}
 */
public class ${enumeration.name} 
#if ($enumeration.isNamed()) 
	extends Enum {
#else 
	extends ValuedEnum { 
#end

#foreach ($enum in $enumeration.enumList)
	public static final String ${enum.uppercasedName} = "${enum.name}";
#end

#if ($enumeration.isNamed())
#foreach ($enum in $enumeration.enumList)	
	private static final ${enumeration.name} ${enum.uppercasedName}_INSTANCE = new ${enumeration.name}(${enum.uppercasedName});
#end
#else
#foreach ($enum in $enumeration.enumList)
	private static final int ${enum.uppercasedName}_VALUE = ${enum.value};
#end
#foreach ($enum in $enumeration.enumList)
	private static final ${enumeration.name} ${enum.uppercasedName}_INSTANCE = new ${enumeration.name}(${enum.uppercasedName}, ${enum.uppercasedName}_VALUE);
#end
#end	
#if ($enumeration.isNamed())

	private ${enumeration.name}(String enumValue) {
		super(enumValue);
	}	
#else

	private ${enumeration.name}(String enumValue, int value) {
		super(enumValue, value);
	}	
#end
	
   	/**
   	 * Gets the enumeration instance for the given name
   	 * @param name The name of the enumeration to retrieve
   	 * @return An <tt>${enumeration.name}</tt> instance for the passed name
   	 * or null if that name is not known to this enumeration
   	 */
   	public static ${enumeration.name} getEnum(String name) {
     	return (${enumeration.name}) getEnum(${enumeration.name}.class, name);
   	}
 
#if ($enumeration.isNamed() == false)  
   	/**
   	 * Gets the enumeration instance for the given value
   	 * @param value The value of the enumeration to retrieve
   	 * @return An <tt>${enumeration.name}</tt> instance for the passed value
   	 * or null if that value is not known to this enumeration
   	 */
   	public static ${enumeration.name} getEnum(int value) {
     	return (${enumeration.name}) getEnum(${enumeration.name}.class, value);
   	}
#end
	
	/**
	 * Gets a <tt>Map</tt> of the enumeration instances of this class
	 * @return A <tt>Map</tt> keyed by name with <tt>${enumeration.name}</tt>
	 * instances as the value
	 */
   	public static Map getEnumMap() {
     	return getEnumMap(${enumeration.name}.class);
   	}
 
 	/**
	 * Gets a <tt>List</tt> of the enumeration instances of this class
	 * @return A <tt>List</tt> of <tt>${enumeration.name}</tt> instances
	 */
   	public static List getEnumList() {
     	return getEnumList(${enumeration.name}.class);
   	}
 	
 	/**
	 * Gets a <tt>Iterator</tt> of the enumeration instances of this class
	 * @return A <tt>Iterator</tt> of <tt>${enumeration.name}</tt> instances
	 */
   	public static Iterator iterator() {
     	return iterator(${enumeration.name}.class);
   	}
		 
}
