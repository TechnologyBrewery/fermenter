package ${basePackage}.client.service.impl;

import ${basePackage}.client.resource.${service.name}Resource;
import ${basePackage}.client.service.${service.name}Delegate;

#foreach( $import in $service.imports )
import $import;
#end

import org.bitbucket.fermenter.stout.messages.MessageManagerAwareService;
import org.bitbucket.fermenter.stout.client.service.LocalOptimizationUtil;
import org.bitbucket.fermenter.stout.client.service.LocalOptimizationServiceWrapper;
import org.bitbucket.fermenter.stout.service.ValueServiceResponse;
import org.bitbucket.fermenter.stout.service.VoidServiceResponse;
import org.bitbucket.fermenter.stout.page.PageWrapper;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;

import javax.inject.Inject;

/**
 * Service implementation for ${service.name} entity maintenance.
 *
 * Generated Code - DO NOT MODIFY
 * Generated from delegate.service.imple.java.vm
 */
@Service
public class ${service.name}DelegateImpl implements ${service.name}Delegate {
	
	/** Fully qualified name of the domain service to check for and potentially use to locally optimized delegate calls. */
	private static final String LOCAL_SERVICE_NAME = "${basePackage}.service.rest.${service.name}Service";
	/** Fully qualified name of the domain object mapper to check for and potentially use to locally optimized delegate calls for BO marshalling. */
	private static final String LOCAL_OBJECT_MAPPER = "${basePackage}.transfer.json.ObjectMapperManager";
	private static Boolean localOptionPresent;
	private static LocalOptimizationServiceWrapper localServiceWrapper;
	private static ObjectMapper objectMapper;

    @Inject
    private ${service.name}Resource ${service.name.toLowerCase()}Resource;
	
    @Inject
    private MessageManagerAwareService messageManagerAwareService;
	
	/** 
	 * Check for and then cache decision on whether the delegate should make RESTful call or locally optimized Java calls.
	 */ 
	private static boolean isLocalInvocationAvailable() {
		if (localOptionPresent == null) {
			localOptionPresent = LocalOptimizationUtil.isLocalServicePresent(LOCAL_SERVICE_NAME);
			if (localOptionPresent) {
				localServiceWrapper = new LocalOptimizationServiceWrapper(LOCAL_SERVICE_NAME);
				objectMapper = LocalOptimizationUtil.getObjectMapper(LOCAL_OBJECT_MAPPER);
			}
			
		}
		
		return localOptionPresent;
	}
	

#foreach( $operation in $service.operations )
	/**
	 * {@inheritDoc}
	 */
    #if($operation.return.isPagedResponse())
    public PageWrapper<${operation.return.javaType}> ${operation.uncapitalizedName}(${operation.signature}) {
	#elseif($operation.return.isMany())
	public Collection<${operation.return.javaType}> ${operation.uncapitalizedName}(${operation.signature}) {
	#elseif($operation.isResponseTypeVoid())
	public void ${operation.uncapitalizedName}(${operation.signature}) {
	#else
	public ${operation.return.javaType} ${operation.uncapitalizedName}(${operation.signature}) {
	#end	
	
    #if($operation.return.isPagedResponse())
        ValueServiceResponse<PageWrapper<${operation.return.javaType}>> response;
	#elseif($operation.return.isMany())
		ValueServiceResponse<Collection<${operation.return.javaType}>> response;
	#elseif($operation.isResponseTypeVoid())
		VoidServiceResponse response;
	#else
		ValueServiceResponse<${operation.return.javaType}> response;
	#end
	if (isLocalInvocationAvailable()) {
		Object[] params = {
		#foreach( $parameter in $operation.parameters )
			#if ($parameter.isEntity())
				LocalOptimizationUtil.convertToBusinessObjectViaJson(${parameter.name}, objectMapper)
			#else
				${parameter.name}
			#end 					
			#if( $foreach.hasNext ),#end
		#end};
		Object rawResponse = localServiceWrapper.invokeLocalService("${operation.uncapitalizedName}", params);
		
	#if($operation.return.isPagedResponse())
		#if($operation.return.isEntity())
		response = (ValueServiceResponse<PageWrapper<${operation.return.javaType}>>)LocalOptimizationUtil.convertResponseToTransferObjectPageWrapperViaJson(rawResponse, ${operation.return.javaType}.class, objectMapper);
        #else
		response = (ValueServiceResponse<PageWrapper<${operation.return.javaType}>>)rawResponse;
	#end
	#elseif($operation.return.isMany())
		#if($operation.return.isEntity())
		response = (ValueServiceResponse<Collection<${operation.return.javaType}>>)LocalOptimizationUtil.convertResponseToTransferObjectListViaJson(rawResponse, ${operation.return.javaType}.class, objectMapper);
		#else
		response = (ValueServiceResponse<Collection<${operation.return.javaType}>>)rawResponse;
		#end
	#elseif($operation.isResponseTypeVoid())
		response = (VoidServiceResponse)rawResponse;
	#else
		#if($operation.return.isEntity())
		response = (ValueServiceResponse<${operation.return.javaType}>)LocalOptimizationUtil.convertResponseToTransferObjectViaJson(rawResponse, ${operation.return.javaType}.class, objectMapper);
		#else
		response = (ValueServiceResponse<${operation.return.javaType}>)rawResponse;
		#end		
	#end		
	} else {
		response = ${service.name.toLowerCase()}Resource.${operation.uncapitalizedName}(
		#foreach( $parameter in $operation.parameters )
					${parameter.name}			
			#if( $foreach.hasNext ),#end
		#end
			);
	}
		
		messageManagerAwareService.addAllMessages(response);
	#if(!$operation.isResponseTypeVoid())		
		return response.getValue();
	#end
	}

#end

}
