package ${basePackage}.client.service;

import feign.Param;
import org.bitbucket.fermenter.stout.page.PageWrapper;

#foreach( $import in $service.imports )
import $import;
#end

/**
 * Service interface for ${service.name} entity maintenance.
 *
 * Generated Code - DO NOT MODIFY
 * Generated from delegate.service.interface.java.vm
 */
public interface ${service.name}Delegate {

#foreach( $operation in $service.operations )
	/**
	#if ($operation.documentation)
	 * ${operation.documentation}
	#else
	 * Execute the ${operation.name} operation.
	#end
	 *
	#if( !$operation.parameters.isEmpty() )
		#foreach( $parameter in $operation.parameters )
			#if( $parameter.documentation )
	 * @param ${parameter.name} ${parameter.documentation}
			#else
	 * @param ${parameter.name}
			#end
		#end
	#end
	#if($operation.return.isMany())
	 * @return A service response-wrapped {@link Collection>} of {@link ${operation.returnManyType}}
	#elseif(!$operation.isResponseTypeVoid())
	 * @return A service response-wrapped instance of {@link ${operation.return.javaType}}
	#else
	 * @return An empty service response
	#end
	 */
	#if($operation.return.isPagedResponse())
    PageWrapper<${operation.return.javaType}> ${operation.uncapitalizedName}(${operation.getSignatureParametersWithParameterAnnotations("Param")});
    #elseif($operation.return.isMany())
	Collection<${operation.return.javaType}> ${operation.uncapitalizedName}(${operation.getSignatureParametersWithParameterAnnotations("Param")});
	#elseif($operation.isResponseTypeVoid())
	void ${operation.uncapitalizedName}(${operation.getSignatureParametersWithParameterAnnotations("Param")});
	#else
	${operation.return.javaType} ${operation.uncapitalizedName}(${operation.getSignatureParametersWithParameterAnnotations("Param")});
	#end

#end
}
