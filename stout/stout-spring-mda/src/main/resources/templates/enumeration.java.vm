package ${basePackage}.enumeration;

import org.apache.commons.lang3.StringUtils;

/**
 * Enumeration ${enumeration.name}.
 * 
 * Generated Code - DO NOT MODIFY
 *
 * Generated from: ${templateName}
 */ 
public enum ${enumeration.name} {

#foreach ($enum in $enumeration.enums)
#if($enumeration.isValued())		
	${enum.uppercasedName}(${enum.value})#if ($foreach.isLast());#else,#end
	#else
	${enum.uppercasedName}#if ($foreach.isLast());#else,#end
	#end
#end

#if ($enumeration.isValued())
 
	private Integer value;

	/**
	 * Creates new instance of this valued enumeration.
	 * 
	 * @param value the value to set for this constant item
	 */
	${enumeration.name}(Integer value) {
		this.value = value;
	}

   	/**
   	 * Gets the underlying value associated with this ${enumeration.name} enum instance.
   	 * 
   	 * @return underlying value associated with this ${enumeration.name} enum instance.
   	 */
   	public Integer getValue() {
   		return value;
   	}

    /**
     * Retrieves the underlying value associated with the enumerated value that
     * matches the input value
     *
     * @param value The value that should represent an enumerated value
     * @return The underlying value associated with the enum that matches the value
     */
    public static Integer toIntegerValue(String value) {
        ${enumeration.name} matchingEnum = valueOfIgnoresCase(value);
        return (matchingEnum != null) ? matchingEnum.getValue() : null;
    }

    /**
     * Retrieves the name of the enumerated value whose associated underlying
     * value is equal to the input value
     *
     * @param value The search value that should match an enum instance's
     * associated underlying value
     * @return The name of the matching enum instance
     */
    public static String toTextString(Integer value) {
        String enumName;
        switch (value) {
        #foreach ($enum in $enumeration.enums)
        case ${enum.value}:
            enumName = "${enum.uppercasedName}";
            break;
        #end
        default:
            enumName = null;
            break;
        }
        return enumName;
    }
#end

    /**
     * Provides a case-insensitive version of valueOf(), which can be helpful when the 
     * enumeration value is a string coming from another technology (e.g., json transported
     * from a non-Java user interface).
     * @param value The value that should represent an enumerated value
     * @return The enumerated value that matches the value
     */
    public static ${enumeration.name} valueOfIgnoresCase(String value) {
    		String upperCaseValue = (StringUtils.isNotBlank(value)) ? value.toUpperCase().replace(" ", "_") : null;
    		return (upperCaseValue != null) ? ${enumeration.name}.valueOf(upperCaseValue) : null;
    	
    }
	
}
