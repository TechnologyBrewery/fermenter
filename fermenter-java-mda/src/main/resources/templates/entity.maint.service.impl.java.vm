package ${basePackage}.service.impl;

import org.tigris.atlas.service.AbstractService;

import ${basePackage}.service.${serviceName}Service;
import ${basePackage}.bizobj.*;
import ${basePackage}.transfer.*;
#foreach($entity.name in $entities)
import ${basePackage}.service.${entity.name}ServiceResponse;
#end

/**
 * Service implementation for the ${serviceName} service
 *
 * Generated Code - DO NOT MODIFY
 */
public class ${serviceName}ServiceImpl extends AbstractService implements ${serviceName}Service {
#foreach( $entity in $entities )

	/**
	 * Save the ${entity.name}
	 *
	 * @param entity ${entity.name} to save
	 * @return ${entity.name}ServiceResponse The saved ${entity.name} container
	 */
	public ${entity.name}ServiceResponse save(${entity.name} entity) {
		begin();
		${entity.name}BO bo = null;
		if (entity != null) {
			${entity.name}PK pk = entity.get${entity.name}PK();
			if (pk.getValue() != null) { 
				bo = ${entity.name}BO.findByPrimaryKey(pk);
			} else {
				bo = BusinessObjectFactory.create${entity.name}BO();
			}
					
			bo.set${entity.name}Values(entity);
			if (!bo.getMessages().hasErrorMessages()) {
				bo.save();
			}
		}
		
		${entity.name}ServiceResponse response = new ${entity.name}ServiceResponse();
		response.set${entity.name}(bo.get${entity.name}Values());
		if( response.hasErrors() ) {
			rollback();
		}
		else {
			commit();
		}
		
		return response;
	}
	 
	/**
	 * Delete the ${entity.name}
	 *
	 * @param entity ${entity.name} to delete
	 * @return ${entity.name}ServiceResponse The deleted ${entity.name} container
	 */
	public ${entity.name}ServiceResponse delete(${entity.name}PK pk) {
		begin();
		${entity.name}BO bo = BusinessObjectFactory.create${entity.name}BO();
		bo.setKey( pk );
		bo.delete();
		${entity.name}ServiceResponse response = new ${entity.name}ServiceResponse();
		response.set${entity.name}(bo.get${entity.name}Values());
		if( response.hasErrors() ) {
			rollback();
		}
		else {
			commit();
		}
		
		return response;
	}

	/**
	 * Find the ${entity.name} by primary key fields
	 *
	 * @param pk The primary key for the ${entity.name}
	 * @return ${entity.name}ServiceResponse The retrieved ${entity.name} container
	 */
	public ${entity.name}ServiceResponse findByPrimaryKey(${entity.name}PK pk) {
		begin();
		${entity.name}BO bo = ${entity.name}BO.findByPrimaryKey(pk);
		${entity.name}ServiceResponse response = new ${entity.name}ServiceResponse();
		if (bo != null) {
			response.set${entity.name}(bo.get${entity.name}Values());
		}						
		if( response.hasErrors() ) {
			rollback();
		}
		else {
			commit();
		}
		
		return response;
	}
#end

}