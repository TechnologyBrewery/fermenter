package ${basePackage}.service.delegate;

import org.tigris.atlas.messages.Message;
import org.tigris.atlas.messages.MessageFactory;
import org.tigris.atlas.messages.Severity;
import ${basePackage}.service.EntityMaintenanceService;
#foreach($entity.name in $entities)
import ${basePackage}.transfer.${entity.name};
import ${basePackage}.transfer.${entity.name}PK;
import ${basePackage}.service.${entity.name}ServiceResponse;
#end

import java.rmi.RemoteException;
import javax.rmi.PortableRemoteObject;
import javax.ejb.CreateException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

import ${basePackage}.service.ejb.EntityMaintenanceServiceHome;
import ${basePackage}.service.ejb.EntityMaintenanceServiceRemote;

import org.tigris.atlas.service.ServiceResponse;
import org.tigris.atlas.service.ejb.EjbUtil;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Service delegate for the EntityMaintenance service
 *
 * Generated Code - DO NOT MODIFY
 */
public class EntityMaintenanceServiceDelegateImpl implements EntityMaintenanceServiceDelegate {

	/** Name which uniquely identifies the ${serviceName} service. */
	public static final String SERVICE_NAME = "${basePackage}.${serviceName}Service";

	private static Log log = LogFactory.getLog(EntityMaintenanceServiceDelegate.class);

	/**
	 * Create a new delegate.
	 */
	public ${serviceName}ServiceDelegateImpl() {
		super();
	
	}
#foreach( $entity in $entities )

	/**
	 * Save the ${entity.name}
	 *
	 * @param entity ${entity.name} to save
	 * @return ${entity.name}ServiceResponse The saved ${entity.name} container
	 */
	public ${entity.name}ServiceResponse save(${entity.name} entity) {
		${entity.name}ServiceResponse response = null;

		try {
			EntityMaintenanceServiceRemote remote = getRemoteService();
			response = (remote != null) ? remote.save(entity) : 
				(${entity.name}ServiceResponse)serverUnavailable(new ${entity.name}ServiceResponse());
			
		} catch (RemoteException re) {
			String methodName = "${entity.name}ServiceResponse save(${entity.name} entity)";
			response = (${entity.name}ServiceResponse)
				handleRemoteException(methodName, re, new ${entity.name}ServiceResponse());
			
		}
		
		return response;

	}
	 
	/**
	 * Delete the ${entity.name}
	 *
	 * @param entity ${entity.name} to delete
	 * @return ${entity.name}ServiceResponse The deleted ${entity.name} container
	 */
	public ${entity.name}ServiceResponse delete(${entity.name}PK pk) {
		${entity.name}ServiceResponse response = null;

		try {
			EntityMaintenanceServiceRemote remote = getRemoteService();
			response = (remote != null) ? remote.delete(pk) : 
				(${entity.name}ServiceResponse)serverUnavailable(new ${entity.name}ServiceResponse());
			
		} catch (RemoteException re) {
			String methodName = "${entity.name}ServiceResponse delete(${entity.name}PK pk)";
			response = (${entity.name}ServiceResponse)
				handleRemoteException(methodName, re, new ${entity.name}ServiceResponse());
			
		}
		
		return response;
	}

	/**
	 * Find the ${entity.name} by primary key fields
	 *
	 * @param pk The primary key for the ${entity.name}
	 * @return ${entity.name}ServiceResponse The retrieved ${entity.name} container
	 */
	public ${entity.name}ServiceResponse findByPrimaryKey(${entity.name}PK pk) {
		${entity.name}ServiceResponse response = null;

		try {
			EntityMaintenanceServiceRemote remote = getRemoteService();
			response = (remote != null) ? remote.findByPrimaryKey(pk) : 
				(${entity.name}ServiceResponse)serverUnavailable(new ${entity.name}ServiceResponse());
			
		} catch (RemoteException re) {
			String methodName = "${entity.name}ServiceResponse findByPrimaryKey(${entity.name}PK pk)";
			response = (${entity.name}ServiceResponse)
				handleRemoteException(methodName, re, new ${entity.name}ServiceResponse());
			
		}
		
		return response;	
	}
#end

	/**
	 * Gets the remote stub for a session bean call
	 * @return The <tt>EntityMaintenanceServiceRemote</tt> to use to perform a remote call
	 */
	protected EntityMaintenanceServiceRemote getRemoteService() {
		EntityMaintenanceServiceRemote remote = null;
		Context ic = null;
		Object o = null;
		try {			
			ic = new InitialContext();
			o = PortableRemoteObject.narrow(ic.lookup(EntityMaintenanceServiceHome.JNDI_NAME),
					EntityMaintenanceServiceHome.class);
			EntityMaintenanceServiceHome home = (EntityMaintenanceServiceHome)o;
			remote = home.create();
		} catch (ClassCastException cce) {
			if (log.isErrorEnabled()) {				
				log.error("A class cast exception occurred looking up service \"EntityMaintenanceService\"'s remote stub." +
					" Expected \"EntityMaintenanceService\", but returned \"" + o.getClass() + "\"", cce);		
			}
			
		} catch (RemoteException re) {
			if (log.isErrorEnabled()) {
				log.error("A remote exception occurred looking up service \"EntityMaintenanceService\"'s remote stub", re);			
			}
			
		} catch (NamingException ne) {
			if (log.isErrorEnabled()) {
				log.error("A naming exception occurred looking up service \"EntityMaintenanceService\"'s remote stub", ne);			
			}
			
		} catch (CreateException ce) {
			if (log.isErrorEnabled()) {
				log.error("A creation exception occurred looking up service \"EntityMaintenanceService\"'s remote stub", ce);			
			}
			
		} finally {
			EjbUtil.closeContext(ic);
			
		}

		return remote;
	}
	
	private ServiceResponse handleRemoteException(String methodName, RemoteException re, ServiceResponse response) {
		if (log.isErrorEnabled()) {
			log.error("Exception occurred during " + methodName, re);
			
		}
		
		Message m = MessageFactory.createMessage();
		m.setKey("unknown.exception");
		m.setSeverity(Severity.getSeverity(Severity.ERROR));
		response.getMessages().addMessage( m );
		return response;
	}
	
	private ServiceResponse serverUnavailable(ServiceResponse response) {
		if (log.isErrorEnabled()) {
			Context ic = null;
			String providerUrl = null;
			try {
				ic = new InitialContext();
				ic.getEnvironment().get(InitialContext.PROVIDER_URL);
				
			} catch (NamingException ne) {
				providerUrl = "unknown";
				
			} finally {
				EjbUtil.closeContext(ic);
				
			}
			log.error("EntityMaintenanceServiceRemote could not be found - provider url: '" + providerUrl + "'!");
			
		}
		
		Message m = MessageFactory.createMessage();
		m.setKey("server.unavailable");
		m.setSeverity(Severity.getSeverity(Severity.ERROR));
		response.getMessages().addMessage( m );
		return response;
	}

}