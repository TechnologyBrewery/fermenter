package ${basePackage}.transfer;

import java.util.Map;
import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.bitbucket.fermenter.transfer.TransferObject;
import org.bitbucket.fermenter.transfer.PrimaryKey;

public class TransferObjectFactoryImpl implements TransferObjectFactoryInterface {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(TransferObjectFactoryImpl.class);
	private static Map TRANSFER_OBJECT_TYPES = null;
	private static Map PRIMARY_KEY_TYPES = null;
	
	private static final String PREFIX = "${basePackage}.transfer.";
	private static final String PK     = "PK";
	
	static {
		TRANSFER_OBJECT_TYPES = new HashMap( ${entities.size()} );
		PRIMARY_KEY_TYPES = new HashMap( ${entities.size()} );
#foreach( $entity in $entities )

		TRANSFER_OBJECT_TYPES.put( ${entity.name}.ENTITY, PREFIX + "${entity.name}" );
		PRIMARY_KEY_TYPES.put( ${entity.name}.ENTITY, PREFIX + "${entity.name}" + PK );
#end
	}
	
	public TransferObject createTransferObject(String entityName) { 
		TransferObject transferObject = null;
		String type = (String) TRANSFER_OBJECT_TYPES.get( entityName );
		
		try {
			Class clazz = Class.forName( type );
			transferObject = (TransferObject) clazz.newInstance();
		} catch (InstantiationException e) {
			LOGGER.error( "Unable to instantiate type: " + type );
		} catch (IllegalAccessException e) {
			LOGGER.error( "Unable to access type: " + type );
		} catch (ClassNotFoundException e) {
			LOGGER.error( "Unable to find class: " + type );
		}
		
		return transferObject;
	}
	
	public PrimaryKey createPrimaryKey(String entityName) { 
		PrimaryKey primaryKey = null;
		String type = (String) PRIMARY_KEY_TYPES.get( entityName );
		
		try {
			Class clazz = Class.forName( type );
			primaryKey = (PrimaryKey) clazz.newInstance();
		} catch (InstantiationException e) {
			LOGGER.error( "Unable to instantiate type: " + type );
		} catch (IllegalAccessException e) {
			LOGGER.error( "Unable to access type: " + type );
		} catch (ClassNotFoundException e) {
			LOGGER.error( "Unable to find class: " + type );
		}
		
		return primaryKey;
	}
	
#foreach( $entity in $entities )
	/**
	 * Create a(n) ${entity.name} transfer object instance
	 */
	public ${entity.name} create${entity.name}() {
		return (${entity.name}) createTransferObject( ${entity.name}.ENTITY );
	}
	
	/**
	 * Create a(n) ${entity.name} primary key instance
	 */
	public ${entity.name}PK create${entity.name}PK() {
		return (${entity.name}PK) createPrimaryKey( ${entity.name}.ENTITY );
	}

#end

}