package ${basePackage}.client.config;

import feign.Feign;
import feign.RequestInterceptor;
import feign.RequestTemplate;
import feign.codec.Decoder;
import feign.codec.Encoder;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
#foreach( $entity in $entities )
#if (!$entity.isTransient() && !$entity.isNonPersistentParentEntity())
import ${basePackage}.client.resource.${entity.name}MaintenanceResource;
#end
#end
#foreach( $service in $services )
import ${basePackage}.client.resource.${service.name}Resource;
#end
import org.bitbucket.fermenter.stout.util.ObjectMapperManager;

import org.bitbucket.fermenter.stout.authn.IdentityManager;
import org.bitbucket.fermenter.stout.util.Slf4jLogger;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.aeonbits.owner.KrauseningConfigFactory;
import org.bitbucket.fermenter.stout.util.FeignErrorTranslator;

import javax.inject.Inject;

/**
 * Configuration for the REST Client.
 *
 * Generated Code - DO NOT MODIFY
 */
@Configuration
public class RestClient${configName}BaseConfig {

    @Inject
    private IdentityManager identityManager;

#foreach( $entity in $entities )
	#if (!$entity.isTransient() && !$entity.isNonPersistentParentEntity())
    /**
     * Resource for retrieving ${entity.name} related data.
     *
     * @return The configured ${entity.name} Resource
     */
    @Bean
    public ${entity.name}MaintenanceResource ${entity.name.toLowerCase()}Resource() {
        return feignBuilder().logger(new Slf4jLogger(${entity.name}MaintenanceResource.class)).target(${entity.name}MaintenanceResource.class, getEndpoint());
    }
    #end
#end

#foreach( $service in $services )
    /**
     * Resource for invoking rest services on ${service.name}.
     *
     * @return The configured ${service.name} Resource
     */
    @Bean
    public ${service.name}Resource ${service.name.toLowerCase()}Resource() {
        return feignBuilder().logger(new Slf4jLogger(${service.name}Resource.class)).target(${service.name}Resource.class, getEndpoint());
    }
#end

    /**
     * Creates baseline resource builder which can be used to configure specific resources.
     *
     * @return Baseline builder
     */
    protected Feign.Builder feignBuilder() {
        return Feign.builder()
        			.errorDecoder(new FeignErrorTranslator())
                .decoder(feignDecoder())
                .encoder(feignEncoder())
                .logger(new Slf4jLogger(getClass()))
                .requestInterceptor(new HeaderInterceptorForwarder(identityManager));
    }

    /**
     * Configures the decoder with our custom ObjectMapperManager.
     *
     * @return A decoder
     */
    protected Decoder feignDecoder() {
        return new JacksonDecoder(ObjectMapperManager.getObjectMapper());
    }

    /**
     * Configures the encoder with our custom ObjectMapperManager.
     *
     * @return A decoder
     */
    protected Encoder feignEncoder() {
        return new JacksonEncoder(ObjectMapperManager.getObjectMapper());
    }

    /**
     * Constructs the URL for a given resource.
     *
     */
    protected String getEndpoint() {
        RestClientBasePropertiesConfig appPropertiesConfig = KrauseningConfigFactory.create(RestClientBasePropertiesConfig.class);
        StringBuilder urlBuilder = new StringBuilder();
        urlBuilder
                .append(appPropertiesConfig.getDomain())
                .append(":")
                .append(appPropertiesConfig.getPort())
                .append("/")
                .append(appPropertiesConfig.getUrl());

        return urlBuilder.toString();
    }

    /**
     * Adds username header to all requests so they don't have to be configured at each endpoint.
     */
    static class HeaderInterceptorForwarder implements RequestInterceptor {
    
	    private IdentityManager identityManager;
	    
	    public HeaderInterceptorForwarder(IdentityManager identityManager) {
            this.identityManager = identityManager;
        }

		@Override
		public void apply(RequestTemplate template) {
			String username = identityManager.getSubjectName();
			if (username != null) {
				template.header("username", username);
			}
		}				
			
    }
}