package ${basePackage}.service.impl;

#foreach( $import in $service.imports )
import $import;
#end

#foreach( $import in $entity.idFieldImports )
import $import;
#end

import ${basePackage}.bizobj.${entity.name}BO;
import ${basePackage}.service.rest.${entity.name}MaintenanceService;

import javax.inject.Inject;
import javax.ws.rs.core.Response;
import javax.ws.rs.WebApplicationException;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;

import org.bitbucket.fermenter.stout.page.json.FindByExampleCriteria;
import org.bitbucket.fermenter.stout.page.PageWrapper;
import org.bitbucket.fermenter.stout.page.PageMapper;
import org.bitbucket.fermenter.stout.page.SortMapper;

import org.bitbucket.fermenter.stout.authz.Action;

import org.bitbucket.fermenter.stout.messages.AbstractMsgMgrAwareService;
import org.bitbucket.fermenter.stout.messages.CoreMessages;
import org.bitbucket.fermenter.stout.messages.DefaultMessages;
import org.bitbucket.fermenter.stout.messages.MessageManager;
import org.bitbucket.fermenter.stout.messages.MessageUtils;
import org.apache.commons.collections.CollectionUtils;

import org.bitbucket.fermenter.stout.service.ValueServiceResponse;
import org.bitbucket.fermenter.stout.service.VoidServiceResponse;

import java.util.Collection;
import java.util.ArrayList;


/**
 * Concrete implementation for create, retrieve, update, and delete (CRUD) functionality 
 * for ${entity.name} business objects.
 *
 * Generated Code - DO NOT MODIFY
 */
@Service 
public class ${entity.name}MaintenanceServiceImpl extends AbstractMsgMgrAwareService implements ${entity.name}MaintenanceService {

#if ( !$entity.idFields.isEmpty() )
  #set ($idFieldJavaType = ${entity.idFields.values().iterator().next().javaType})
  #set ($idFieldName = ${entity.idFields.values().iterator().next().name})
#else
  #set ($idFieldJavaType = 'String')
  #set ($idFieldName = 'id')
#end  
		
	@Inject
	private DefaultMessages messages;
		
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ValueServiceResponse<${entity.name}BO> saveOrUpdate(${idFieldJavaType} ${idFieldName}, ${entity.name}BO entity) {
		entity.setKey($idFieldName);
		return saveOrUpdate(entity);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ValueServiceResponse<${entity.name}BO> saveOrUpdate(${entity.name}BO entity) {
		initMsgMgr(messages);
		assertAuthorization(PATH, Action.SAVE);
		${entity.name}BO persistedEntity = entity.save();
		ValueServiceResponse<${entity.name}BO> response = new ValueServiceResponse<>(persistedEntity);
		addAllMsgMgrToResponse(response);
		
		if (response.getMessages().hasErrorMessages()) {
		    Response statusResponse = Response.status(Response.Status.BAD_REQUEST).entity(response).build();
			throw new WebApplicationException(statusResponse);
		}
		
		return response;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public VoidServiceResponse delete(${idFieldJavaType} ${idFieldName}) {
		initMsgMgr(messages);
		assertAuthorization(PATH, Action.DELETE);
		${entity.name}BO entityToDelete = ${entity.name}BO.findByPrimaryKey(${idFieldName});
		if (entityToDelete != null) {
			entityToDelete.delete();
		}
		else {
		    MessageManager.addMessage(MessageUtils.createErrorMessage(CoreMessages.INVALID_ENTITY_KEY,
	                new String[] { id.toString() }, new Object[] { id, "a record with this key does not exist" }));
		}
		VoidServiceResponse response = new VoidServiceResponse();
		addAllMsgMgrToResponse(response);
		return response;
	}	
	 	
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.SUPPORTS)
	@Override
	public ValueServiceResponse<${entity.name}BO> findByPrimaryKey(${idFieldJavaType} ${idFieldName}) {
		initMsgMgr(messages);
		assertAuthorization(PATH, Action.RETRIEVE);
		${entity.name}BO retrievedEntity = ${entity.name}BO.findByPrimaryKey(${idFieldName} #if (!$entity.relations.isEmpty()), true#end);
		ValueServiceResponse<${entity.name}BO> response = new ValueServiceResponse<${entity.name}BO>(retrievedEntity);
		addAllMsgMgrToResponse(response);
		return response;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation = Propagation.SUPPORTS)
	@Override
	public ValueServiceResponse<PageWrapper<${entity.name}BO>> findByExample(FindByExampleCriteria<${entity.name}BO> criteria) {
		initMsgMgr(messages);
		Sort sort = SortMapper.mapToSort(criteria.getSortWrapper());
		Page<${entity.name}BO> allEntitiesPage = ${entity.name}BO.findByExample(criteria.getProbe(), criteria.getPage(), criteria.getSize(), sort);
		PageWrapper<${entity.name}BO> allEntities = (new PageMapper<${entity.name}BO>()).mapToPageWrapper(allEntitiesPage);
		ValueServiceResponse<PageWrapper<${entity.name}BO>> response = new ValueServiceResponse<PageWrapper<${entity.name}BO>>(allEntities);
		addAllMsgMgrToResponse(response);
		return response;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public ValueServiceResponse<Collection<${entity.name}BO>> bulkSaveOrUpdate(Collection<${entity.name}BO> entities) {
		initMsgMgr(messages);
	    assertAuthorization(PATH, Action.SAVE);
		Collection<${entity.name}BO> values = new ArrayList<>();
		for(${entity.name}BO entity : entities){
			ValueServiceResponse<${entity.name}BO> response = saveOrUpdate(entity);
			values.add(response.getValue());
			MessageManager.addMessages(response.getMessages());
		}
		
		ValueServiceResponse<Collection<${entity.name}BO>> responses = new ValueServiceResponse<>(values);
		addAllMsgMgrToResponse(responses);
		
		if (responses.getMessages().hasErrorMessages() || CollectionUtils.isEmpty(entities)) {
		    Response statusResponse = Response.status(Response.Status.BAD_REQUEST).entity(responses).build();
			throw new WebApplicationException(statusResponse);
		}
        
		return responses;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	@Override
	public VoidServiceResponse bulkDelete(Collection<${entity.name}BO> entities) {
		initMsgMgr(messages);
		assertAuthorization(PATH, Action.DELETE);
		VoidServiceResponse responses = new VoidServiceResponse();
		
		for (${entity.name}BO entity : entities) {
			VoidServiceResponse response = delete(entity.getKey());
			MessageManager.addMessages(response.getMessages());
		}
		
		addAllMsgMgrToResponse(responses);
		
		if (responses.getMessages().hasErrorMessages() || CollectionUtils.isEmpty(entities)) {
		    Response statusResponse = Response.status(Response.Status.BAD_REQUEST).entity(responses).build();
			throw new WebApplicationException(statusResponse);
		}
		
		return responses;
	}	
	
}