package ${basePackage}.client.service.impl;

import ${basePackage}.client.resource.${entity.name}MaintenanceResource;
import ${basePackage}.client.service.${entity.name}MaintenanceDelegate;
import ${basePackage}.transfer.${entity.name};
import ${basePackage}.client.cache.${entity.name}Cache;
import ${basePackage}.client.config.CachePropertiesConfig;
import org.aeonbits.owner.KrauseningConfigFactory;

import org.bitbucket.fermenter.stout.messages.MessageManagerAwareService;
import org.bitbucket.fermenter.stout.client.service.AbstractMaintenanceServiceDelegate;
import org.bitbucket.fermenter.stout.client.service.LevelOneCache;
import org.bitbucket.fermenter.stout.client.service.LevelOneCacheManager;
import org.bitbucket.fermenter.stout.client.service.LocalOptimizationUtil;
import org.bitbucket.fermenter.stout.client.service.LocalOptimizationServiceWrapper;
import org.bitbucket.fermenter.stout.exception.UnrecoverableException;
import org.bitbucket.fermenter.stout.service.ValueServiceResponse;
import org.bitbucket.fermenter.stout.service.VoidServiceResponse;

import org.apache.commons.collections.CollectionUtils;
import org.bitbucket.fermenter.stout.page.PageWrapper;
import org.bitbucket.fermenter.stout.page.json.FindByExampleCriteria;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.ArrayList;
import java.util.Collection;

import javax.inject.Inject;

#foreach( $import in $entity.idFieldImports )
import $import;
#end


/**
 * Service implementation for ${entity.name} entity maintenance.
 *
 * Generated Code - DO NOT MODIFY
 * Generated from delegate.maintenance.impl.java.vm
 */
@Service
public class ${entity.name}MaintenanceDelegateImpl extends AbstractMaintenanceServiceDelegate implements ${entity.name}MaintenanceDelegate {

    /** Fully qualified name of the domain service to check for and potentially use to locally optimized delegate calls. */
    private static final String LOCAL_SERVICE_NAME = "${basePackage}.service.rest.${entity.name}MaintenanceService";
    /** Fully qualified name of the domain object mapper to check for and potentially use to locally optimized delegate calls for BO marshalling. */
    private static final String LOCAL_OBJECT_MAPPER = "${basePackage}.transfer.json.ObjectMapperManager";
    private static Boolean localOptionPresent;
    private static LocalOptimizationServiceWrapper localServiceWrapper;
    private static Class<?> businessObjectClass;
    private static ObjectMapper objectMapper;

    private static final LevelOneCacheManager<${entity.identifier.javaType}, ${entity.name}> levelOneCacheManager = new LevelOneCacheManager<>();
    private static final CachePropertiesConfig cachePropertiesConfig = KrauseningConfigFactory.create(CachePropertiesConfig.class);
    private static final boolean IS_CACHE_ENABLED = cachePropertiesConfig.is${entity.name}CachingEnabled();
    
    @Inject
    private ${entity.name}MaintenanceResource ${entity.name.toLowerCase()}Resource;
	
    @Inject
    private MessageManagerAwareService messageManagerAwareService;
    
    private DelegateMaintenanceTransactionSynchronization delegateMaintenanceTransactionSynchronization = new DelegateMaintenanceTransactionSynchronization();

    /**
     * {@inheritDoc}
     */
    public ${entity.name} findByPrimaryKey(${entity.identifier.javaType} ${entity.identifier.name}) {
	    
        if (${entity.identifier.name} == null) {
            throw new UnrecoverableException("Cannot lookup an instance with a null primary key!");
        }
    
        boolean skipLookupDueToInTransactionDelete = false;
        ${entity.name} retrievedInstance = null;
        if (checkLevelOneCache()) {
            // first check for a changed, but not committed instance (in-transaction cache):
            LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
            retrievedInstance = levelOneCache.retrieve(${entity.identifier.name});
            skipLookupDueToInTransactionDelete = levelOneCache.getPendingDeletes().contains(${entity.identifier.name});
            
        }
        
        if (retrievedInstance == null && IS_CACHE_ENABLED) {
            // if nothing is pending, check the level 2 (cross-transaction) cache:
            retrievedInstance = ${entity.name}Cache.getFromCache(${entity.identifier.name});
            
        } 
        
        if (retrievedInstance == null && !skipLookupDueToInTransactionDelete) {
            ValueServiceResponse<${entity.name}> response;
            if (isLocalInvocationAvailable()) {
                Object[] params = {${entity.identifier.name}};
                Object rawResponse = localServiceWrapper.invokeLocalService("findByPrimaryKey", params);
                response = (ValueServiceResponse<${entity.name}>)LocalOptimizationUtil.convertResponseToTransferObjectViaJson(rawResponse, ${entity.name}.class, objectMapper);            
            } else {
                response = ${entity.name.toLowerCase()}Resource.findByPrimaryKey(${entity.identifier.name});
            }
            messageManagerAwareService.addAllMessages(response);
            ${entity.name}Cache.addToCache(response.getValue());
            retrievedInstance = response.getValue();
        }

        return retrievedInstance;
    }

    /**
     * {@inheritDoc}
     */
    public ${entity.name} create(${entity.name} entity) {
	    
        ${entity.name} created${entity.name} = entity;
        
        if (checkLevelOneCache()) {
            // queue up for creation upon transaction commit (or flush):
            LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
            #if ( $entity.identifier.hasGenerator() )
            // you will need to manually flush if you want this instance to be available for reselect via the cache 
            // as the generated primary key will not be assigned until it is flushed.  If you want Stout to support an
            // "insert on create" for generated keys, please enter an issue.  As of now, it does not support this option.
            levelOneCache.create(entity);
#else
            // with a non-generated key, we can make this available for retrieval without flushing:
            levelOneCache.createAndCache(entity.get${entity.identifier.capitalizedName}(), entity);
#end            
            synchronizeTransaction();
            
        } else {
            created${entity.name} = performCreate(entity);
            
        }

        return created${entity.name};
    }
    
    @SuppressWarnings("unchecked")
    private ${entity.name} performCreate(${entity.name} entity) {
        ValueServiceResponse<${entity.name}> response = null;
        if (isLocalInvocationAvailable()) {
            Class<?>[] paramTypes = {businessObjectClass};
            Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(entity, objectMapper)};
            Object rawResponse = localServiceWrapper.invokeLocalService("saveOrUpdate", paramTypes, params);
            response = (ValueServiceResponse<${entity.name}>)LocalOptimizationUtil.convertResponseToTransferObjectViaJson(rawResponse, ${entity.name}.class, objectMapper);
            
        } else {
            response = ${entity.name.toLowerCase()}Resource.create(entity);
            
        }    
            
        ${entity.name} created${entity.name} = response.getValue();
        messageManagerAwareService.addAllMessages(response);
        if(!response.hasErrors()) {
             if (checkLevelOneCache()) {                
                LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
                levelOneCache.cache(created${entity.name}.get${entity.identifier.capitalizedName}(), created${entity.name});
            }
        
            ${entity.name}Cache.addToCache(created${entity.name});
        }
        return created${entity.name};
    }

    /**
     * {@inheritDoc}
     */
    public ${entity.name} update(${entity.identifier.javaType} ${entity.identifier.name}, ${entity.name} entity) {
	    
        ${entity.name} updated${entity.name} = null;
        
        if (checkLevelOneCache()) {
            // queue up for creation upon transaction commit (or flush):
            LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
            levelOneCache.update(${entity.identifier.name}, entity);
            
            updated${entity.name} = entity;
            synchronizeTransaction();
            
        } else {
            updated${entity.name} = performUpdate(${entity.identifier.name}, entity);
            
        }

        return updated${entity.name};
    }
    
    private ${entity.name} performUpdate(${entity.identifier.javaType} ${entity.identifier.name}, ${entity.name} entity) {
        ValueServiceResponse<${entity.name}> response = ${entity.name.toLowerCase()}Resource.update(${entity.identifier.name}, entity);
        ${entity.name} created${entity.name} = response.getValue();
        messageManagerAwareService.addAllMessages(response);
        if(!response.hasErrors()) {
            if (checkLevelOneCache()) {                
                LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
                levelOneCache.cache(${entity.identifier.name}, entity);
            }
        
            ${entity.name}Cache.addToCache(created${entity.name});
        } else {
            ${entity.name}Cache.removeFromCache(${entity.identifier.name});
        }
        return created${entity.name};
    }

    /**
     * {@inheritDoc}
     */
    public void delete(${entity.identifier.javaType} ${entity.identifier.name}) {
	    
        if (checkLevelOneCache()) {
            // queue up for deletion upon transaction commit (or flush):
            LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
            levelOneCache.delete(${entity.identifier.name});            
            synchronizeTransaction();
            
        } else {
            performDelete(${entity.identifier.name});
        }
    }

    private void performDelete(${entity.identifier.javaType} ${entity.identifier.name}) {
        VoidServiceResponse response = null;
        if (isLocalInvocationAvailable()) {
            Object[] params = {${entity.identifier.name}};
            Object rawResponse = localServiceWrapper.invokeLocalService("delete", params);
            response = (VoidServiceResponse)rawResponse;            
        } else {
            response = ${entity.name.toLowerCase()}Resource.delete(${entity.identifier.name});
        }
        ${entity.name}Cache.removeFromCache(${entity.identifier.name});
        messageManagerAwareService.addAllMessages(response);
    }

    /**
     * {@inheritDoc}
     */
    public PageWrapper<${entity.name}> findByExample(FindByExampleCriteria<${entity.name}> criteria) {
	    
        ValueServiceResponse<PageWrapper<${entity.name}>> response = null;
        if (isLocalInvocationAvailable()) {
            Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(criteria, objectMapper)};
            Object rawResponse = localServiceWrapper.invokeLocalService("findByExample", params);
            response = (ValueServiceResponse<PageWrapper<${entity.name}>>)LocalOptimizationUtil.convertResponseToTransferObjectPageWrapperViaJson(rawResponse, ${entity.name}.class, objectMapper);
        
        } else {
            response = ${entity.name.toLowerCase()}Resource.findByExample(criteria);
        }
        messageManagerAwareService.addAllMessages(response);
        return response.getValue();
    }

    /**
     * {@inheritDoc}
     */
    public Collection<${entity.name}> findByExampleContains(${entity.name} probe) {
	    
        probe = initializeProbeIfNullForFeignRequestBody(probe);

        ValueServiceResponse<Collection<${entity.name}>> response  = null;
        if (isLocalInvocationAvailable()) {
            Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(probe, objectMapper)};
            Object rawResponse = localServiceWrapper.invokeLocalService("findByExampleContains", params);
            response = (ValueServiceResponse<Collection<${entity.name}>>)LocalOptimizationUtil.convertResponseToTransferObjectListViaJson(rawResponse, ${entity.name}.class, objectMapper);
        
        } else {
            response = ${entity.name.toLowerCase()}Resource.findByExampleContains(probe);
        }
        messageManagerAwareService.addAllMessages(response);
        return response.getValue();
    }
    
    /**
     * {@inheritDoc}
     */
    public PageWrapper<${entity.name}> findByExampleContainsPaged(${entity.name} probe, int startPage, int count) {
	    
        ValueServiceResponse<PageWrapper<${entity.name}>> response  = null;
        if (isLocalInvocationAvailable()) {
            Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(probe, objectMapper), startPage, count};
            Object rawResponse = localServiceWrapper.invokeLocalService("findByExampleContainsPaged", params);
            response = (ValueServiceResponse<PageWrapper<${entity.name}>>)LocalOptimizationUtil.convertResponseToTransferObjectPageWrapperViaJson(rawResponse, ${entity.name}.class, objectMapper);
        
        } else {
            response = ${entity.name.toLowerCase()}Resource.findByExampleContainsPaged(probe, startPage, count);
        }
        messageManagerAwareService.addAllMessages(response);
        return response.getValue();
    }
    
    /**
     * {@inheritDoc}
     */
    public Collection<${entity.name}> findByExampleMatches(${entity.name} probe) {
	    
        probe = initializeProbeIfNullForFeignRequestBody(probe);
        ValueServiceResponse<Collection<${entity.name}>> response  = null;
        if (isLocalInvocationAvailable()) {
            Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(probe, objectMapper)};
            Object rawResponse = localServiceWrapper.invokeLocalService("findByExampleMatches", params);
            response = (ValueServiceResponse<Collection<${entity.name}>>)LocalOptimizationUtil.convertResponseToTransferObjectListViaJson(rawResponse, ${entity.name}.class, objectMapper);
        
        } else {
            response = ${entity.name.toLowerCase()}Resource.findByExampleMatches(probe);
        }
        messageManagerAwareService.addAllMessages(response);
        return response.getValue();
    }
    
    /**
     * {@inheritDoc}
     */
    public PageWrapper<${entity.name}> findByExampleMatchesPaged(${entity.name} probe, int startPage, int count) {
	    
        ValueServiceResponse<PageWrapper<${entity.name}>> response  = null;
        if (isLocalInvocationAvailable()) {
            Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(probe, objectMapper), startPage, count};
            Object rawResponse = localServiceWrapper.invokeLocalService("findByExampleMatchesPaged", params);
            response = (ValueServiceResponse<PageWrapper<${entity.name}>>)LocalOptimizationUtil.convertResponseToTransferObjectPageWrapperViaJson(rawResponse, ${entity.name}.class, objectMapper);
        
        } else {
            response = ${entity.name.toLowerCase()}Resource.findByExampleMatchesPaged(probe, startPage, count);
        }
        messageManagerAwareService.addAllMessages(response);
        return response.getValue();
    }

    /**
    * Feign requires that the request body for a request is not null. Thus we initialize the probe if it is null before doing the request.
    */
    private ${entity.name} initializeProbeIfNullForFeignRequestBody(${entity.name} probe) {
        return probe == null ? new ${entity.name}() : probe;
    }
    
   /**
     * {@inheritDoc}
     */
    public Collection<${entity.name}> bulkSaveOrUpdate(Collection<${entity.name}> entities) {
	            
        Collection<${entity.name}> resultantEntities = entities;
    
       if (checkLevelOneCache()) {
            // queue up for creation upon transaction commit (or flush):
            LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
            for (${entity.name} entity : entities) {
                if (entity.get${entity.identifier.capitalizedName}() != null) {
                    levelOneCache.update(entity.get${entity.identifier.capitalizedName}(), entity);
                } else {
                    levelOneCache.create(entity);
                }
            }
            

            synchronizeTransaction();

        } else {
            resultantEntities = performBulkSaveOrUpdate(entities);
            
        }
       
        return resultantEntities;
    }
    
    private Collection<${entity.name}> performBulkSaveOrUpdate(Collection<${entity.name}> entities) {
        Collection<${entity.name}> values = null;
        if (CollectionUtils.isNotEmpty(entities)) {
            ValueServiceResponse<Collection<${entity.name}>> response;
            if (isLocalInvocationAvailable()) {
                Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(entities, objectMapper)};
                Object rawResponse = localServiceWrapper.invokeLocalService("bulkSaveOrUpdate", params);
                response = (ValueServiceResponse<Collection<${entity.name}>>)LocalOptimizationUtil.convertResponseToTransferObjectListViaJson(rawResponse, ${entity.name}.class, objectMapper);
            
            } else {
                response = ${entity.name.toLowerCase()}Resource.bulkSaveOrUpdate(entities);
            }
            messageManagerAwareService.addAllMessages(response);
            values = response.getValue();
            if(!response.hasErrors()) {
                if (checkLevelOneCache()) {                
                    LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();                    
                    
                    for (${entity.name} update : values) {
                        levelOneCache.cache(update.get${entity.identifier.capitalizedName}(), update);
                    }
                }
                ${entity.name}Cache.addToCache(values);
            } else {
                ${entity.name}Cache.invalidateCache();
            }
        }
        return values;
    }    
    
    /**
     * {@inheritDoc}
     */
    public void bulkDelete(Collection<${entity.name}> entities) {
	    
        if (checkLevelOneCache()) {
            LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
            Collection<${entity.identifier.javaType}> deletesAsIds = convertDeleteEntitiesToIds(entities);
            levelOneCache.delete(deletesAsIds);
            synchronizeTransaction();
            
        } else {
            performBulkDelete(entities);
            
        }
    }
    
    private void performBulkDelete(Collection<${entity.name}> entities) {
        if (CollectionUtils.isNotEmpty(entities)) {
            VoidServiceResponse response = null;
            if (isLocalInvocationAvailable()) {
                Object[] params = {LocalOptimizationUtil.convertToBusinessObjectViaJson(entities, objectMapper)};
                Object rawResponse = localServiceWrapper.invokeLocalService("bulkDelete", params);
                response = (VoidServiceResponse)rawResponse;
 
            } else {
                response = ${entity.name.toLowerCase()}Resource.bulkDelete(entities);
            }
            
            for (${entity.name} ${entity.name.toLowerCase()} : entities) {
                ${entity.name}Cache.removeFromCache(${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}());
            }
            
            messageManagerAwareService.addAllMessages(response);
        }
    }
    
    protected Collection<${entity.name}> convertDeleteIdsToEntities(Collection<${entity.identifier.javaType}> pendingDeletes) {
        Collection<${entity.name}> deletesAsEntities = new ArrayList<>();
        // TODO: change when the API for bulk delete changes to ids:
        for (${entity.identifier.javaType} id : pendingDeletes) {
            ${entity.name} entityWrapper = new ${entity.name}();
            entityWrapper.set${entity.identifier.capitalizedName}(id);
            deletesAsEntities.add(entityWrapper);
        }
        
        return deletesAsEntities;
    }
    
    protected Collection<${entity.identifier.javaType}> convertDeleteEntitiesToIds(Collection<${entity.name}> pendingDeletes) {
        Collection<${entity.identifier.javaType}> deletesAsIds = new ArrayList<>();
        // TODO: change when the API for bulk delete changes to ids:
        for (${entity.name} entity : pendingDeletes) {
            deletesAsIds.add(entity.get${entity.identifier.capitalizedName}());
        }
        
        return deletesAsIds;
    } 
    
    /**
     * {@inheritDoc}
     */
    public void flushInsertsAndUpdates() {
        LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();
                
        Collection<${entity.name}> pendingSaveOrUpdates = levelOneCache.getPendingInserts();
        pendingSaveOrUpdates.addAll(levelOneCache.getPendingUpdates());
        performBulkSaveOrUpdate(pendingSaveOrUpdates);
        
        levelOneCache.clearPendingInsertsAndUpdates();
        
    }
    
    /**
     * {@inheritDoc}
     */
    public void flushDeletes() {
        LevelOneCache<${entity.identifier.javaType}, ${entity.name}> levelOneCache = levelOneCacheManager.getCacheForCurrentTransaction();

        Collection<${entity.identifier.javaType}> pendingDeletes = levelOneCache.getPendingDeletes();
        Collection<${entity.name}> deletesAsEntities = convertDeleteIdsToEntities(pendingDeletes);                
        performBulkDelete(deletesAsEntities);
        
        levelOneCache.clearPendingDeletes();
    }         
    
    private void synchronizeTransaction() { 
        delegateMaintenanceTransactionSynchronization.synchronizeTransaction("${entity.name}", this);
        
    }
    
    /** 
     * Check for and then cache decision on whether the delegate should make RESTful call or locally optimized Java calls.
     */ 
    private static boolean isLocalInvocationAvailable() {
        if (localOptionPresent == null) {
            localOptionPresent = LocalOptimizationUtil.isLocalServicePresent(LOCAL_SERVICE_NAME);
            if (localOptionPresent) {
                localServiceWrapper = new LocalOptimizationServiceWrapper(LOCAL_SERVICE_NAME);
                objectMapper = LocalOptimizationUtil.getObjectMapper(LOCAL_OBJECT_MAPPER);
                businessObjectClass = LocalOptimizationUtil.lookupBusinessObjectClassByTransferObject(${entity.name}.class);
            }
            
        }
        
        return localOptionPresent;
    }
    
}
