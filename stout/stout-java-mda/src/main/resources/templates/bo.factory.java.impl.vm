package ${basePackage}.bizobj;

import java.util.Map;
import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.bitbucket.fermenter.stout.bizobj.BusinessObject;
import ${basePackage}.transfer.*;

public class BusinessObjectFactoryImpl implements BusinessObjectFactoryInterface {
	
	private static final Logger LOGGER = LoggerFactory.getLogger(BusinessObjectFactoryImpl.class);
	private static Map<String, String> BUSINESS_OBJECT_TYPES = null;
	
	private static final String PREFIX = "${basePackage}.bizobj.";
	
	static {
		BUSINESS_OBJECT_TYPES = new HashMap<String, String>();
#foreach( $entity in $entities )
		BUSINESS_OBJECT_TYPES.put( ${entity.name}.ENTITY, PREFIX + "${entity.name}BO" );
#end
	}
	
	public BusinessObject createBusinessObject(String entityName) { 
		BusinessObject businessObject = null;
		String type = (String) BUSINESS_OBJECT_TYPES.get( entityName );
		
		try {
			Class<?> clazz = Class.forName( type );
			businessObject = (BusinessObject) clazz.newInstance();
		} catch (InstantiationException e) {
			LOGGER.error( "Unable to instantiate type: " + type );
		} catch (IllegalAccessException e) {
			LOGGER.error( "Unable to access type: " + type );
		} catch (ClassNotFoundException e) {
			LOGGER.error( "Unable to find class: " + type );
		}
		
		return businessObject;
	}
	
#foreach( $entity in $entities )
	/**
	 * Create a(n) ${entity.name} business object instance.
	 */
	public ${entity.name}BO create${entity.name}BO() {
		return (${entity.name}BO) createBusinessObject( ${entity.name}.ENTITY );
	}

#end

}