package org.bitbucket.fermenter.test.domain.persist.hibernate;

import java.io.Serializable;
import java.util.List;
import java.lang.String;
import java.lang.String;

import org.bitbucket.fermenter.persist.hibernate.AbstractHibernateDaoImpl;

import org.bitbucket.fermenter.test.domain.bizobj.SimpleDomainBO;
import org.bitbucket.fermenter.test.domain.transfer.TransferObjectFactory;
import org.bitbucket.fermenter.test.domain.transfer.SimpleDomain;
import org.bitbucket.fermenter.test.domain.transfer.SimpleDomainPK;
import org.bitbucket.fermenter.test.domain.persist.SimpleDomainBaseDao;

import org.hibernate.Hibernate;
import org.hibernate.type.*;

import java.lang.Long;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import org.bitbucket.fermenter.test.domain.enumeration.SimpleDomainEnumeration;

/**
 * Data access object for the SimpleDomain application entity.
 * 
 * Generated Code - DO NOT MODIFY
 */
public abstract class SimpleDomainBaseDaoImpl extends AbstractHibernateDaoImpl<SimpleDomainBO, SimpleDomainPK>
		implements SimpleDomainBaseDao {

	/**
	 * Creates a new {@link SimpleDomainPK} wrapper based on the given String ID value that was generated by Hibernate.
	 * 
	 * @param persistentIDValue
	 *            ID that was created by Hibernate as a result of making a transient {@link SimpleDomainBO} persistent.
	 * @return wrapper {@link SimpleDomainPK} object that encapsulates the newly created {@link SimpleDomainBO}'s ID.
	 */
	@Override
	protected SimpleDomainPK getNewPKWrapperForPersistentIDValue(Serializable persistentIDValue) {
		SimpleDomainPK pk = TransferObjectFactory.createSimpleDomainPK();
		pk.setId((String) persistentIDValue);
		return pk;
	}

	/**
	 * Returns the underlying {@link SimpleDomainBO} implementation {@link Class} whose data access logic is managed by
	 * this DAO.
	 * 
	 * @return
	 */
	@Override
	protected Class<SimpleDomainBO> getBusinessObjectClazz() {
		return SimpleDomainBO.class;
	}

	/**
	 * Returns the logical name for the entity whose data access logic is managed by this DAO.
	 * 
	 * @return
	 */
	@Override
	protected String getEntityName() {
		return SimpleDomain.ENTITY;
	}

	/**
	 * Execute the SelectAllSimpleDomains query.
	 * 
	 * @return List of {@link SimpleDomain}s
	 */
	public List<SimpleDomainBO> selectAllSimpleDomains() {
		String[] paramNames = new String[] {};
		Object[] paramValues = new Object[] {};
		Type[] paramTypes = new Type[] {};

		return query(SimpleDomainBaseDao.SelectAllSimpleDomains, paramNames, paramValues, paramTypes);
	}

	/**
	 * Execute the SelectAllSimpleDomainsByName query.
	 * 
	 * @param name
	 *            The name
	 * @return List of {@link SimpleDomain}s
	 */
	public List<SimpleDomainBO> selectAllSimpleDomainsByName(String name) {
		String[] paramNames = new String[] { "name" };
		Object[] paramValues = new Object[] { name };
		Type[] paramTypes = new Type[] { StringType.INSTANCE };

		return query(SimpleDomainBaseDao.SelectAllSimpleDomainsByName, paramNames, paramValues, paramTypes);
	}

	/**
	 * Execute the SelectAllSimpleDomainsByType query.
	 * 
	 * @param type
	 *            The type
	 * @return List of {@link SimpleDomain}s
	 */
	public List<SimpleDomainBO> selectAllSimpleDomainsByType(String type) {
		String[] paramNames = new String[] { "type" };
		Object[] paramValues = new Object[] { type };
		Type[] paramTypes = new Type[] { StringType.INSTANCE };

		return query(SimpleDomainBaseDao.SelectAllSimpleDomainsByType, paramNames, paramValues, paramTypes);
	}

}