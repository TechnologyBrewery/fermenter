package ${basePackage}.service.delegate;

import ${basePackage}.service.ServiceFactory;
import ${basePackage}.service.EntityMaintenanceService;
#foreach($entity.name in $entities)
import ${basePackage}.transfer.${entity.name};
import ${basePackage}.transfer.${entity.name}PK;
import ${basePackage}.service.${entity.name}ServiceResponse;
#end
import org.bitbucket.fermenter.service.delegate.pojo.AbstractServiceDelegate;

/**
 * Service delegate for the EntityMaintenance service.
 *
 * Generated Code - DO NOT MODIFY
 */
public class EntityMaintenanceServiceDelegateImpl extends AbstractServiceDelegate implements EntityMaintenanceServiceDelegate {

	// N.B. - This MUST be namespaced to ensure uniqueness when multiple apps are present
	/** Name which uniquely identifies the ${serviceName} service. */
	public static final String SERVICE_NAME = "${basePackage}.${serviceName}Service";

	// Service implementation to which work is delegated.
	private ${serviceName}Service serviceImpl;

	/**
	 * Create a new delegate.
	 */
	public ${serviceName}ServiceDelegateImpl() {
		super();
		serviceImpl = ServiceFactory.create${serviceName}Service();

	}
#foreach( $entity in $entities )

	/**
	 * Save the ${entity.name}
	 *
	 * @param entity ${entity.name} to save
	 * @return ${entity.name}ServiceResponse The saved ${entity.name} container
	 */
	public ${entity.name}ServiceResponse save(${entity.name} entity) {
		return serviceImpl.save(entity);		
	}
	 
	/**
	 * Delete the ${entity.name}
	 *
	 * @param entity ${entity.name} to delete
	 * @return ${entity.name}ServiceResponse The deleted ${entity.name} container
	 */
	public ${entity.name}ServiceResponse delete(${entity.name}PK pk) {
		return serviceImpl.delete(pk);		
	}

	/**
	 * Find the ${entity.name} by primary key fields
	 *
	 * @param pk The primary key for the ${entity.name}
	 * @return ${entity.name}ServiceResponse The retrieved ${entity.name} container
	 */
	public ${entity.name}ServiceResponse findByPrimaryKey(${entity.name}PK pk) {
		return serviceImpl.findByPrimaryKey(pk);	
	}
#end

}
