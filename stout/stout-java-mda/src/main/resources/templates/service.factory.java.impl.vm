package ${basePackage}.service;

import java.util.Map;
import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.bitbucket.fermenter.stout.service.Service;


public class ServiceFactoryImpl implements ServiceFactoryInterface {
		
	private static final Logger LOGGER = LoggerFactory.getLogger(ServiceFactoryImpl.class);
	private static Map SERVICE_TYPES = null;
	
	private static final String PREFIX = "${basePackage}.service.impl.";
	private static final String SUFFIX = "ServiceImpl";
	
	static {
		SERVICE_TYPES = new HashMap( ${serviceNames.size()} );
#foreach( $serviceName in $serviceNames )
		SERVICE_TYPES.put( ${serviceName}Service.SERVICE_NAME, PREFIX + "${serviceName}" + SUFFIX );
#end
		SERVICE_TYPES.put( EntityMaintenanceService.SERVICE_NAME, PREFIX + "EntityMaintenance" + SUFFIX );
	}
	
	public Service createService(String serviceName) {
		Service service = null;
		String serviceType = (String) SERVICE_TYPES.get( serviceName );
		
		try {
			Class clazz = Class.forName( serviceType );
			service = (Service) clazz.newInstance();
		} catch (InstantiationException e) {
			LOGGER.error( "Unable to instantiate type: " + serviceType );
		} catch (IllegalAccessException e) {
			LOGGER.error( "Unable to access type: " + serviceType );
		} catch (ClassNotFoundException e) {
			LOGGER.error( "Unable to find class: " + serviceType );
		}
		
		return service;
	}
		
	public EntityMaintenanceService createEntityMaintenanceService() {
		return (EntityMaintenanceService) createService( EntityMaintenanceService.SERVICE_NAME );
	}

#foreach( $serviceName in $serviceNames )
	/**
	 * Create a(n) ${serviceName}Service instance
	 */
	public ${serviceName}Service create${serviceName}Service() {
		return (${serviceName}Service) createService( ${serviceName}Service.SERVICE_NAME ); 
	}

#end

}