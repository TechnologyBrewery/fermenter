package ${basePackage}.service.delegate;

#foreach( $import in $service.imports )
import $import;
#end

import ${basePackage}.service.ServiceFactory;
import ${basePackage}.service.${service.name}Service;
import org.bitbucket.fermenter.service.delegate.pojo.AbstractServiceDelegate;

import org.bitbucket.fermenter.messages.Message;
import org.bitbucket.fermenter.messages.Messages;
import org.bitbucket.fermenter.messages.MessageFactory;
import org.bitbucket.fermenter.messages.Severity;

/**
 * Service delegate for the ${service.name} service.
 *
 * Generated Code - DO NOT MODIFY
 */
public class ${service.name}ServiceDelegateImpl extends AbstractServiceDelegate implements ${service.name}ServiceDelegate {

	/** Service implementation to which work is delegated. */
	private ${service.name}Service serviceImpl;

	/**
	 * Create a new delegate.
	 */
	public ${service.name}ServiceDelegateImpl() {
		super();
		serviceImpl = ServiceFactory.create${service.name}Service();

	}

#foreach( $operation in $service.operations )
#if ($operation.isRemote())

	/**
	 * Execute the ${operation.name} service
	 *
	 * @return ${operation.responseType}
	 */
	public ${operation.responseType} ${operation.lowercaseName}(${operation.signature}) {
		return serviceImpl.${operation.lowercaseName}(${operation.parameterNames});
		
	}

#end	 
#end
}
