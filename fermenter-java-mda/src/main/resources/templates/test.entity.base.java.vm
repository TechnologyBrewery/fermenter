package ${testPrefix}.delegate;

import ${prefix}.entity.${entityName};
#foreach( $relation in $relations )
import ${prefix}.entity.${relation.type};
#foreach( $childRelation in $relation.childRelations )
import ${prefix}.entity.${childRelation.type};
#end
#end

import com.freddiemac.eaf.transfer.TransferObject;
import test.freddiemac.eaf.entity.delegate.TestEntityManagement;

/**
 * Test basic persistence operations for the ${entityName} application entity
 *
 * @author Generated by EAF tools
 */
 
public abstract class Test${entityName}Base extends TestEntityManagement {

	private static ${entityName}  the${entityName};
	private static TransferObject the${entityName}Pk;
#foreach( $relation in $relations )
	private static ${relation.type} the${relation.type};
#foreach( $childRelation in $relation.childRelations )
	private static ${childRelation.type} the${childRelation.type};
#end
#end
	
	/**
	 * Maintain the current entity state for comparisons
	 *
	 * @return ${entityName} the entity
	 */
	protected ${entityName} get${entityName}() {
		if( the${entityName} == null ) {
			the${entityName} = (${entityName}) newTo( ${entityName}.ENTITY );
			setInitialValues( the${entityName} );
		}
		
		return the${entityName};
	}
#foreach( $relation in $relations )

	/**
	 * Maintain the current entity state for comparisons
	 *
	 * @return ${relation.type} the entity
	 */
	protected ${relation.type} get${relation.type}() {
		return the${relation.type};
	}
#foreach( $childRelation in $relation.childRelations )

	/**
	 * Maintain the current entity state for comparisons
	 *
	 * @return ${childRelation.type} the entity
	 */
	protected ${childRelation.type} get${childRelation.type}() {
		return the${childRelation.type};
	}
#end
#end
	
	/**
	 * Get the transfer object for the ${entityName}
	 *
	 * @return TransferObject the entity
	 */
	protected TransferObject get${entityName}To() {
		return (TransferObject) get${entityName}();
	}
	
	/**
	 * Get the primary key fields for the ${entityName}
	 *
	 * @return TransferObject the primary key
	 */
	protected TransferObject get${entityName}Pk() {
		return the${entityName}Pk;
	}
	
	/**
	 * Set the initial values for the tests
	 *
	 * Subclass responsibility
	 */
	protected abstract void setInitialValues(${entityName} entity);
	
	/**
	 * Make sure the saved entity is what we intended
	 */
	protected abstract boolean compare(${entityName} entity);

	/**
	 * Test insert without errors.
	 *
	 */
	public void testInsert${entityName}() {
		TransferObject to = save( get${entityName}To() );	
		
		// Ensure no errors encountered
		assertEquals( 0, to.getErrors().size() );		
		
		// Retain the key values for future lookups
		the${entityName}Pk = to;
		the${entityName} = (${entityName}) to;
	}

	/**
	 * Verify successful insert.
	 *
	 */
	public void testInsert${entityName}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		// Ensure that we get something back
		assertTrue( entity != null );
		
		// Ensure that the looked up entity is equal to what we intended
		assertTrue( compare( entity ) );
	}

	/**
	 * Test update without errors.
	 *
	 */
	public void testUpdate${entityName}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		// Set some new values on the ${entityName}
		the${entityName} = update( entity );
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}
	
	/**
	 * Update the ${entityName} with some new values
	 *
	 * Subclass responsibility
	 */
	protected abstract ${entityName} update( ${entityName} entity );

	/**
	 * Verify successful update of ${entityName}.
	 *
	 */
	public void testUpdate${entityName}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		// Ensure that we get something back
		assertTrue( entity != null );
			
		// Ensure that the looked up entity is equal to what we intended
		assertTrue( compare( entity ) );
	}
#foreach( $relation in $relations ) 

	/**
	 * Create a new ${relation.type} and add it to the ${entityName}
	 */
	protected abstract ${relation.type} add${relation.type}(${entityName} entity);

	/**
	 * Verify no errors on update of ${entityName} with new ${relation.label}
	 *
	 */
	public void testUpdate${entityName}Add${relation.type}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		the${relation.type} = add${relation.type}( entity );
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}

	/**
	 * Verify successful update of ${entityName} with new ${relation.label}
	 *
	 */
	public void testUpdate${entityName}Add${relation.type}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		assertEquals( 1, entity.get${relation.type}s().size() );
			
		// Ensure that the looked up entity is equal to what we intended
		assertTrue( compare( entity ) );
	} 
	
	/**
	 * Update the ${relation.type} with some new values
	 */
	protected abstract ${relation.type} update${relation.type}(${relation.type} child);

	/**
	 * Verify no errors on update of ${entityName} with changed ${relation.label}
	 *
	 */
	public void testUpdate${entityName}Change${relation.type}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		
		the${relation.type} = update${relation.type}( child );
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}
	
	/**
	 * Compare the persisted ${relation.type} with what we saved.
	 * Subclass responsibility.
	 */
	protected abstract boolean compare${relation.type}(${relation.type} child);

	/**
	 * Verify successful update of ${entityName} with changed ${relation.label}
	 *
	 */
	public void testUpdate${entityName}Change${relation.type}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		assertEquals( 1, entity.get${relation.type}s().size() );
			
		// Ensure that the looked up entity is equal to what we intended
		assertTrue( compare( entity ) );
	} 
#foreach( $childRelation in $relation.childRelations )

	/**
	 * Create a new ${childRelation.type} and add it to the ${entityName}->${relation.type}
	 */
	protected abstract ${childRelation.type} add${childRelation.type}(${relation.type} entity);

	/**
	 * Verify no errors when adding a ${childRelation.type} to a ${entityName}->${relation.type}
	 */
	public void testUpdate${entityName}${relation.type}Add${childRelation.type}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		
		the${childRelation.type} = add${childRelation.type}( child );
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}
	
	/**
	 * Compare the persisted ${childRelation.type} with what we saved.
	 * Subclass responsibility.
	 */
	protected abstract boolean compare${childRelation.type}(${childRelation.type} grandChild);

	/**
	 * Verify successful update of ${entityName}->${relation.type} with new ${childRelation.type}
	 *
	 */
	public void testUpdate${entityName}${relation.type}Add${childRelation.type}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		
		assertEquals( 1, child.get${childRelation.type}s().size() );
		
		assertTrue( compare( entity ) );
	}  
	
	/**
	 * Update the ${childRelation.type} with some new values
	 */
	protected abstract ${childRelation.type} update${childRelation.type}(${childRelation.type} grandChild);

	/**
	 * Verify no errors on update of ${entityName}->${relation.type} with changed ${childRelation.type}
	 *
	 */
	public void testUpdate${entityName}${relation.type}Change${childRelation.type}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		${childRelation.type} grandChild = (${childRelation.type}) child.get${childRelation.type}s().iterator().next();
		
		the${childRelation.type} = update${childRelation.type}( grandChild );
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}

	/**
	 * Verify successful update of ${entityName}->${relation.type} with changed ${childRelation.type}
	 *
	 */
	public void testUpdate${entityName}${relation.type}Change${childRelation.type}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		
		assertEquals( 1, child.get${childRelation.type}s().size() );
		
		assertTrue( compare( entity ) );
	} 

	/**
	 * Verify no errors on update of ${entityName}->${relation.type} with removed ${childRelation.type}
	 *
	 */
	public void testUpdate${entityName}${relation.type}Remove${childRelation.type}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		${childRelation.type} grandChild = (${childRelation.type}) child.get${childRelation.type}s().iterator().next();
		
		child.remove${childRelation.type}( grandChild );	
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}

	/**
	 * Verify successful update of ${entityName} with removed ${relation.label}
	 *
	 */
	public void testUpdate${entityName}${relation.type}Remove${childRelation.type}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		
		assertEquals( 0, child.get${childRelation.type}s().size() );
	}
#end

	/**
	 * Verify no errors on update of ${entityName} with removed ${relation.label}
	 *
	 */
	public void testUpdate${entityName}Remove${relation.type}() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
		
		entity.remove${relation.type}( child );	
			
		// Ensure no errors encountered
		assertEquals( 0, save( entity ).getErrors().size() );
	}

	/**
	 * Verify successful update of ${entityName} with removed ${relation.label}
	 *
	 */
	public void testUpdate${entityName}Remove${relation.type}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		assertEquals( 0, entity.get${relation.type}s().size() );
	}
#end

	/**
	 * Test delete without errors.
	 *
	 */
	public void testDelete${entityName}() {
		// Ensure no errors when performing deletion
		assertEquals( 0, delete( get${entityName}Pk() ).getErrors().size() );
	}

	/**
	 * Test successful delete.
	 *
	 */
	public void testDelete${entityName}Success() {
		${entityName} entity = (${entityName}) findByPrimaryKey( get${entityName}Pk() );
		
		// Ensure no entity returned from select
		assertTrue( entity == null );
	}
}