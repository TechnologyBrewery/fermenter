package ${basePackage}.client.service.impl;

import ${basePackage}.client.resource.${entity.name}MaintenanceResource;
import ${basePackage}.client.service.${entity.name}MaintenanceDelegate;
import ${basePackage}.transfer.${entity.name};
import ${basePackage}.client.cache.${entity.name}Cache;
import ${basePackage}.client.config.CachePropertiesConfig;
import org.aeonbits.owner.KrauseningConfigFactory;

import org.bitbucket.fermenter.stout.messages.MessageManager;
import org.bitbucket.fermenter.stout.service.ValueServiceResponse;
import org.bitbucket.fermenter.stout.service.VoidServiceResponse;

import org.apache.commons.collections.CollectionUtils;
import org.bitbucket.fermenter.stout.page.PageWrapper;
import org.bitbucket.fermenter.stout.page.json.FindByExampleCriteria;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Collection;

#foreach( $import in $entity.idFieldImports )
import $import;
#end


/**
 * Service implementation for ${entity.name} entity maintenance.
 *
 * Generated Code - DO NOT MODIFY
 */
@Service
public class ${entity.name}MaintenanceDelegateImpl implements ${entity.name}MaintenanceDelegate {
    #if ( !$entity.idFields.isEmpty() )
        #set ($idFieldJavaType = ${entity.idFields.values().iterator().next().javaType})
        #set ($idFieldName = ${entity.idFields.values().iterator().next().name})
    #else
        #set ($idFieldJavaType = 'String')
        #set ($idFieldName = 'id')
    #end

    @Autowired
    private ${entity.name}MaintenanceResource ${entity.name.toLowerCase()}Resource;

    private static final CachePropertiesConfig cachePropertiesConfig = KrauseningConfigFactory.create(CachePropertiesConfig.class);
    private static final boolean IS_CACHE_ENABLED = cachePropertiesConfig.is${entity.name}CachingEnabled();

	/**
	 * {@inheritDoc}
	 */
    public ${entity.name} findByPrimaryKey(${idFieldJavaType} ${idFieldName}) {
        ${entity.name} cachedResult = null;
        if(IS_CACHE_ENABLED) {
            cachedResult = ${entity.name}Cache.getFromCache(${idFieldName});
        }
        if(cachedResult != null) {
            return cachedResult;
        } else {
            ValueServiceResponse<${entity.name}> response = ${entity.name.toLowerCase()}Resource.findByPrimaryKey(${idFieldName});
            MessageManager.addMessages(response.getMessages());
            ${entity.name}Cache.addToCache(response.getValue());
            return response.getValue();
        }
    }

    /**
	 * {@inheritDoc}
	 */
    public ${entity.name} create(${entity.name} entity) {
		ValueServiceResponse<${entity.name}> response = ${entity.name.toLowerCase()}Resource.create(entity);
		${entity.name} created${entity.name} = response.getValue();
		MessageManager.addMessages(response.getMessages());
        if(!response.hasErrors()) {
            ${entity.name}Cache.addToCache(created${entity.name});
        }
		return created${entity.name};
    }

	/**
	 * {@inheritDoc}
	 */
    public ${entity.name} update(${idFieldJavaType} ${idFieldName}, ${entity.name} entity) {
		ValueServiceResponse<${entity.name}> response = ${entity.name.toLowerCase()}Resource.update(${idFieldName}, entity);
        ${entity.name} created${entity.name} = response.getValue();
		MessageManager.addMessages(response.getMessages());
        if(!response.hasErrors()) {
            ${entity.name}Cache.addToCache(created${entity.name});
        } else {
            ${entity.name}Cache.removeFromCache(${idFieldName});
        }
        return created${entity.name};
    }

	/**
	 * {@inheritDoc}
	 */
    public void delete(${idFieldJavaType} ${idFieldName}) {
		VoidServiceResponse response = ${entity.name.toLowerCase()}Resource.delete(${idFieldName});
        ${entity.name}Cache.removeFromCache(${idFieldName});
		MessageManager.addMessages(response.getMessages());
    }

	/**
	 * {@inheritDoc}
	 */
    public PageWrapper<${entity.name}> findByExample(FindByExampleCriteria<${entity.name}> criteria) {
		ValueServiceResponse<PageWrapper<${entity.name}>> response = ${entity.name.toLowerCase()}Resource.findByExample(criteria);
		MessageManager.addMessages(response.getMessages());
		return response.getValue();
    }
    
   /**
	 * {@inheritDoc}
	 */
    public Collection<${entity.name}> bulkSaveOrUpdate(Collection<${entity.name}> entities) {
    	Collection<${entity.name}> values = null;
    	if (CollectionUtils.isNotEmpty(entities)) {
	        ValueServiceResponse<Collection<${entity.name}>> response = ${entity.name.toLowerCase()}Resource.bulkSaveOrUpdate(entities);
	        MessageManager.addMessages(response.getMessages());
	        values = response.getValue();
            if(!response.hasErrors()) {
                ${entity.name}Cache.addToCache(values);
            } else {
                ${entity.name}Cache.invalidateCache();
            }
        }
        return values;
    }
    
    /**
	 * {@inheritDoc}
	 */
    public void bulkDelete(Collection<${entity.name}> entities) {
    	if (CollectionUtils.isNotEmpty(entities)) {
	        VoidServiceResponse response = ${entity.name.toLowerCase()}Resource.bulkDelete(entities);
	        for (${entity.name} ${entity.name.toLowerCase()} : entities) {
	            ${entity.name}Cache.removeFromCache(${entity.name.toLowerCase()}.get${entity.idFields.values().iterator().next().capitalizedName}());
	        }
	        MessageManager.addMessages(response.getMessages());
        }
    }
}
