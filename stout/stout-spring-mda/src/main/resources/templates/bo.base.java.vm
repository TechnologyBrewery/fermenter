package ${basePackage}.bizobj;

#if ($entity.isNonPersistentParentEntity())
import java.io.Serializable;
#end
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.HashSet;
import java.util.Set;
import static java.lang.Math.floor;
import static java.lang.String.valueOf;
import java.math.RoundingMode;

import javax.inject.Inject;
import javax.persistence.Column;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import org.apache.commons.lang3.builder.ReflectionToStringBuilder;
import org.apache.commons.lang3.StringUtils;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;


#if ( $entity.isTransient() )
import org.bitbucket.fermenter.stout.bizobj.BaseSpringBO;
import org.bitbucket.fermenter.stout.bizobj.BusinessObject;
#else
import org.bitbucket.fermenter.stout.bizobj.BasePersistentSpringBO;
import org.bitbucket.fermenter.stout.bizobj.PersistentBusinessObject;
import org.bitbucket.fermenter.stout.exception.UnrecoverableException;
import org.bitbucket.fermenter.stout.messages.Message;
import org.bitbucket.fermenter.stout.messages.MessageManager;
import org.bitbucket.fermenter.stout.messages.ServiceMessages;
import org.bitbucket.fermenter.stout.messages.Severity;
import org.bitbucket.fermenter.stout.util.MetamodelInstanceUtil;
import org.bitbucket.fermenter.stout.util.QueryUtils;
import org.bitbucket.fermenter.stout.messages.CoreMessages;

import org.hibernate.annotations.Type;

import javax.persistence.CascadeType;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.JoinColumn;
import javax.persistence.MappedSuperclass;
import javax.persistence.OneToMany;
import javax.persistence.ManyToOne;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.JoinType;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.metamodel.PluralAttribute;

import org.springframework.data.jpa.domain.Specification;
import static org.springframework.data.jpa.domain.Specification.where;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.ExampleMatcher.StringMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.bitbucket.fermenter.stout.page.PageWrapper;
import org.bitbucket.fermenter.stout.page.PageConverter;

import org.hibernate.annotations.Type;

    #if (!$entity.isNonPersistentParentEntity())
import ${basePackage}.persist.${entity.name}Repository;
	#else
import org.springframework.data.jpa.repository.JpaRepository;
    #end
#end

#if ($entity.hasNamedEnumeration())
import javax.persistence.Enumerated;
import javax.persistence.EnumType;
#end

#foreach ($import in $entity.imports )
import ${import};
#end

#foreach ($reference in $entity.references )
  #if ($reference.isExternal() && $reference.foreignKeyFields.iterator().hasNext() )
import ${reference.importPrefix}.client.service.${reference.type}MaintenanceDelegate;
  #end
#end

/**
 * Business object for the ${entity.name} application entity.
#if ($entity.documentation)
 * ${entity.documentation}
#end
 *
 * Generated Code - DO NOT MODIFY
 *
 * Generated from ${templateName}
 */
#if ( $entity.isTransient())
    #if ($entity.hasParent())
public abstract class ${entity.name}BaseBO extends ${entity.persistentEntityParentJavaType} implements BusinessObject<${entity.persistentEntityParentJavaType}> {
    #else    
public abstract class ${entity.name}BaseBO extends BaseSpringBO<${entity.name}BO> implements BusinessObject<${entity.name}BO> {
    #end
#elseif ( $entity.isNonPersistentParentEntity() )
@MappedSuperclass
public abstract class ${entity.name}BaseBO<PK extends Serializable, BO, JPA extends JpaRepository<BO, PK>> extends BasePersistentSpringBO<PK, BO, JPA> implements PersistentBusinessObject<PK, BO> {
#else 
@MappedSuperclass
public abstract class ${entity.name}BaseBO extends ${entity.persistentEntityParentJavaType}<${entity.identifier.javaType}, ${entity.name}BO, ${entity.name}Repository> implements PersistentBusinessObject<${entity.identifier.javaType}, ${entity.name}BO> {

    @Inject
    @Transient
    private ${entity.name}Repository repository;

    private static boolean hasCheckedTableMismatch;
#end

#if ($entity.hasIdentifier())
    #if ( !$entity.isTransient() )
    @Id
    #if ($entity.identifier.type == 'uuid')
    @Type(type = "org.hibernate.type.UUIDCharType")
    #end 
    #if ( $entity.identifier.hasGenerator() )
        #if ( $entity.identifier.generator == 'identity')
    @GeneratedValue(strategy=GenerationType.IDENTITY)
        #else 
    @GeneratedValue
        #end
    #end
    @Column(name="${entity.identifier.column}")
    #end
    private ${entity.identifier.javaType} ${entity.identifier.name};

#end

#foreach ( $field in $entity.fields)
    #if ( !$entity.isTransient() )
    
    #if ($field.isTransient())
    @Transient
    #else
    #set ( $isRequired = $field.isRequired() )
        @Column(name="${field.column}" #if($isRequired), nullable=false#end #if($field.javaType == 'BigDecimal'), scale=$field.getScale()#end
    )
    #end 
    #end
    #if ( $field.hasMinLength() || $field.hasMaxLength())
    @Size(#if($field.hasMinLength())min=${field.minLength}#if($field.hasMaxLength()),#end#end #if($field.hasMaxLength())max=${field.maxLength}#end)
    #end
    #if ( $field.hasMaxValue() )
        #if ($field.javaType == 'BigDecimal')
    @DecimalMax("${field.maxValue}")
        #else
    @Max(${field.maxValue})
          #end
    #end
    #if ($field.javaType == 'BigDecimal')
    @Digits(integer= #if($field.hasMaxValue())
            $field.maxValue.split('\.')[0].length()
    #else Integer.MAX_VALUE
    #end, fraction=$field.getScale())
    #end
    #if ( $field.hasMinValue() )
        #if ($field.javaType == 'BigDecimal')
    @DecimalMin("${field.minValue}")
        #else
    @Min(${field.minValue})
        #end
    #end
    #if ( $field.hasFormats() )
    ${field.patternsAsValidationString}	
    #end
    #if ($field.type == 'numeric_boolean')
    @Type(type = "org.hibernate.type.NumericBooleanType")
    #end 
    #if ($field.type == 'uuid')
    @Type(type = "org.hibernate.type.UUIDCharType")
    #end   
    #if ($field.isNamedEnumeration())
    @Enumerated(EnumType.STRING)
    #end
    #if ( $field.isRequired() )
    @NotNull
    #end
    private ${field.javaType} ${field.name};

#end

#if ( !$entity.isTransient() && !$entity.isNonPersistentParentEntity() )
    /**
     * While distasteful to leverage the name of a subclass, we know this to be 100% consistent w/in Stout and it
     * allows for checking to ensure that the table name, which *must* be specified in the leaf class from a JPA
     * perspective, matches the table name most recently specified in the metamodel instance for ${entity.name}.  In
     * some cases, this just results in a straightforward error.  In others, it can be a pain to track down, so this
     * compromise is justified as worth the labor/frustration savings.
     */
    protected ${entity.name}BaseBO() {
        if (!hasCheckedTableMismatch) {
            String leafClassName = "${basePackage}.bizobj.${entity.name}BO";
            MetamodelInstanceUtil.checkTableNameForMismatch(leafClassName, "${entity.table}");
            hasCheckedTableMismatch = true;
        }
    }
#elseif ( $entity.isTransient() )
    protected ${entity.name}BaseBO() {
        defaultFieldValues();
    }
#end


#if ( $entity.hasIdentifier() )

    #if ( !$entity.isTransient() )
    @Override
    public ${entity.identifier.javaType} getKey() {
        return ${entity.identifier.name}; 
    }

    @Override
    public void setKey(${entity.identifier.javaType} ${entity.identifier.name}) {
        set${entity.identifier.capitalizedName}(${entity.identifier.name});
    }
    #end
#end
    
#if ( !$entity.isTransient() && !$entity.isNonPersistentParentEntity() )
    #if (!$entity.relations.isEmpty())
    public static ${entity.name}BO findByPrimaryKey(${entity.identifier.javaType} key) {
        ${entity.name}BO foundBO = ${entity.name}BO.findByPrimaryKey(key, false);
        if (foundBO != null) {
            foundBO.postFindByPrimaryKey();
        }
        return foundBO;
    }

    public static ${entity.name}BO findByPrimaryKey(${entity.identifier.javaType} key, boolean eagerFetchRelations) {
        Optional<${entity.name}BO> optionalFoundBO = eagerFetchRelations ? getDefaultRepository().findOne(where(keyEquals(key)).and(eagerFetchRelations())) : getDefaultRepository().findById(key);
        ${entity.name}BO foundBO = optionalFoundBO.isPresent() ? optionalFoundBO.get() : null;
        if (foundBO != null) {
            foundBO.postFindByPrimaryKey();
        }
        return foundBO;
    }
    #else
    public static ${entity.name}BO findByPrimaryKey(${entity.identifier.javaType} key) {
        Optional<${entity.name}BO> optionalFoundBO = getDefaultRepository().findById(key);
        ${entity.name}BO foundBO = optionalFoundBO.isPresent() ? optionalFoundBO.get() : null;
        if (foundBO != null) {
            foundBO.postFindByPrimaryKey();
        }
        return foundBO;
    }
    #end

    /**
	 * Find and delete by primary key.
	 * @param key
	 */
    public static void deleteByPrimaryKey(${entity.identifier.javaType} key) {
        if(key != null) {
            ${entity.name}BO foundBO = ${entity.name}BO.findByPrimaryKey(key);
            if (foundBO != null) {
                foundBO.delete();
            }
        }
    }

    /**
	 * Bulk find and delete entities.
	 * @param entities
	 */
    public static void bulkDelete(Collection<${entity.name}BO> entities) {
        if(entities != null && !entities.isEmpty()) {
            for(${entity.name}BO entity : entities) {
                if(entity != null && entity.getKey() != null) {
                    deleteByPrimaryKey(entity.getKey());
                }
            }
        }
    }

    /**
	 * Bulk find and delete entities based on entityKeys.
	 * @param entities
	 */
    public static void bulkDeleteKeys(Collection<${entity.identifier.javaType}> entityKeys) {
        if(entityKeys != null && !entityKeys.isEmpty()) {
            for(${entity.identifier.javaType} entityKey : entityKeys) {
                if(entityKey != null) {
                    deleteByPrimaryKey(entityKey);
                }
            }
        }
    }
    
    /**
     * Method that does a findByExample looking for any objects that contain the
     * same data as the probe that is passed in (ie. If the string "AN" is set
     * on a field in the probe, and an object has "CAN" or "AND" or "WAND" --
     * any string that contains the string "AN", then that object will be added
     * to the result set.
     * 
     * The result set will be sorted by ascending primary key by default,
     * returning page 0 and the default query limit set in QueryUtils
     * (configurable via properties).
     * 
     * Passing in a null probe will result in the equivalent of a findAll() that
     * starts on page 0 and is limited to the default query limit.
     *
     * @param probe
     * @return List<${entity.name}BO> results that contains data that matches the
     *         example passed in
     */
    public static List<${entity.name}BO> findByExampleContains(${entity.name}BO probe) {
        return findByExampleWithDefaultSort(probe, true, QueryUtils.DEFAULT_PAGE, QueryUtils.QUERY_LIMIT).getContent();  
    }

    /**
     * Method that does a findByExample looking for any objects that contain the
     * same data as the probe that is passed in (ie. If the string "AN" is set
     * on a field in the probe, and an object has "CAN" or "AND" or "WAND" --
     * any string that contains the string "AN", then that object will be added
     * to the result set.
     * 
     * The result set will be sorted by ascending primary key by default,
     * returning the page and count of objects specified in the params.
     * 
     * Passing in a null probe will result in the equivalent of a findAll() that
     * starts on page 0 and is limited to the default query limit.
     * 
     * @param probe
     *            the example object
     * @param startPage
     *            the page to start
     * @param count
     *            maximum number of results to return
     * @return PageWrapper<${entity.name}BO> results that contains data that matches the
     *         example passed in
     */
    public static PageWrapper<${entity.name}BO> findByExampleContainsPaged(${entity.name}BO probe, Integer startPage, Integer count) {
        return findByExampleWithDefaultSort(probe, true, startPage, count);  
    }
    
    /**
     * Method that does a findByExample looking for any objects that match the
     * same data as the probe that is passed in (ie. If the string "AN" is set
     * on a field in the probe, only objects that have exactly "AN" in the same
     * field will be added to the result set.
     * 
     * The result set will be sorted by ascending primary key by default,
     * returning page 0 and the default query limit set in QueryUtils
     * (configurable via properties).
     *
     * Passing in a null probe will result in the equivalent of a findAll() that
     * starts on page 0 and is limited to the default query limit.
     * 
     * @param probe
     * @return List<${entity.name}BO> results that contains data that matches
     *         the example passed in
     */
    public static List<${entity.name}BO> findByExampleMatches(${entity.name}BO probe) {
        return findByExampleWithDefaultSort(probe, false, QueryUtils.DEFAULT_PAGE, QueryUtils.QUERY_LIMIT).getContent();
    }

    /**
     * Method that does a findByExample looking for any objects that match the
     * same data as the probe that is passed in (ie. If the string "AN" is set
     * on a field in the probe, only objects that have exactly "AN" in the same
     * field will be added to the result set.
     * 
     * The result set will be sorted by ascending primary key by default,
     * returning the page and count of objects specified in the params.
     * 
     * Passing in a null probe will result in the equivalent of a findAll() that
     * starts on page 0 and is limited to the default query limit.
     * 
     * @param probe
     *            the example object
     * @param startPage
     *            the page to start
     * @param count
     *            maximum number of results to return
     * @return PageWrapper<${entity.name}BO> results that contains data that matches the
     *         example passed in
     */
    public static PageWrapper<${entity.name}BO> findByExampleMatchesPaged(${entity.name}BO probe, Integer startPage, Integer count) {
        return findByExampleWithDefaultSort(probe, false, startPage, count);
    }

    /**
     * Method that does a findByExample using the params passed in.
     * 
     * The result set will be sorted by ascending primary key by default,
     * returning the page and count of objects specified in the params.
     * 
     * Passing in a null probe will result in the equivalent of a findAll().
     * 
     * @param probe
     *            the example object
     * @param containsMatch
     *            whether to match exactly or match if it contains
     * @param startPage
     *            the page to start
     * @param count
     *            maximum number of results to return
     * @return List<${entity.name}BO> matching results
     */
    public static PageWrapper<${entity.name}BO> findByExampleWithDefaultSort(${entity.name}BO probe, Boolean containsMatch, Integer startPage, Integer count){
        
        if(probe == null) {
            // default to find all if no probe is specified
            probe = new ${entity.name}BO();
        }
        
        // Set some defaults
        if (startPage == null || startPage < 0){
            startPage = QueryUtils.DEFAULT_PAGE;
        }
        
        if (count == null || count <=0) {
            count = QueryUtils.QUERY_LIMIT;
            Message countOverrideMessage = new Message(ServiceMessages.FIND_BY_EXAMPLE_COUNT_OVERRIDE, Severity.INFO);
            MessageManager.addMessage(countOverrideMessage);
        }
        
        // Figure out if there is a default sort that can be used
        #set($idList ="")
        #if ( $entity.hasIdentifier() )
            #if ( !$entity.isTransient() )
                #set( $idList = '"' + "${entity.identifier.name}" + '"' )
            #end 
        #end
        
        #if (!$idList)
        Pageable pageable = QueryUtils.getDefaultPageRequest();
        #else
        Sort sort = Sort.by(Sort.Direction.ASC, $idList);
        Pageable pageable = PageRequest.of(startPage, count, sort);
        #end
        
        PageWrapper<${entity.name}BO> results = findByExample(probe, containsMatch, pageable);
        return results;
    }

    /**
     * Method that does a findByExample using the params passed in.
     * 
     * Passing in a null probe will result in the equivalent of a findAll().
     * 
     * @param probe
     *            the example object
     * @param containsMatch
     *            whether to match exactly or match if it contains
     * @param startPage
     *            the page to start
     * @param count
     *            maximum number of results to return
     * @param sort
     *            how the results will be sorted on returned and for paging
     * @return PageWrapper<${entity.name}BO> matching results
     */
    public static PageWrapper<${entity.name}BO> findByExample(${entity.name}BO probe, Boolean containsMatch, Integer startPage, Integer count, Sort sort) {
        PageWrapper<${entity.name}BO> result = null;
        if(probe == null) {
            // default to find all if no probe is specified
            probe = new ${entity.name}BO();
            
        }
        
        if (startPage == null) {
            Message requiresStartPage = new Message(ServiceMessages.FIND_BY_EXAMPLE_REQUIRES_START_PAGE, Severity.ERROR);
            MessageManager.addMessage(requiresStartPage);
			
        } else if (count == null) {
            Message requiresCount = new Message(ServiceMessages.FIND_BY_EXAMPLE_REQUIRES_COUNT, Severity.ERROR);
            MessageManager.addMessage(requiresCount);
            
        } else if (sort == null) {
			Message requiresSort = new Message(ServiceMessages.FIND_BY_EXAMPLE_REQUIRES_SORT, Severity.ERROR);
            MessageManager.addMessage(requiresSort);
            
        } else {
            Pageable pageable = PageRequest.of(startPage, count, sort);
            result = findByExample(probe, containsMatch, pageable);

        }
        
        return result;
    }

    /**
     * Method that does a findByExample using the params passed in.
     * 
     * The result set will be sorted by ascending primary key by default,
     * returning the page and count of objects specified in the {@link Pageable}.
     * 
     * Passing in a null probe will result in the equivalent of a findAll().
     * 
     * @param probe
     *            the example object
     * @param containsMatch
     *            whether to match exactly or match if it contains
     * @param pageable
     *            paging information for the query
     * @return List<${entity.name}BO> matching results
     */
    public static PageWrapper<${entity.name}BO> findByExample(${entity.name}BO probe, Boolean containsMatch, Pageable pageable) {
        Example<${entity.name}BO> example;
        if(containsMatch) {
            ExampleMatcher matcher = ExampleMatcher.matching().withIgnoreCase().withStringMatcher(StringMatcher.CONTAINING);
            example = Example.of(probe, matcher);
        } else {
            example = Example.of(probe);
        }

        Page<${entity.name}BO> entitiesPage = getDefaultRepository().findAll(example, pageable);
		PageWrapper<${entity.name}BO> result = (new PageConverter<${entity.name}BO>()).convertToPageWrapper(entitiesPage);
        return result;
    }
#end

#if ( !$entity.isTransient() && !$entity.isNonPersistentParentEntity() )
    /**
     * Provide an opportunity to interact with the object after it is found, but before it is 
     * returned by {@link ${entity.name}BO#findByPrimaryKey(${entity.identifier.javaType})} and other 
     * primary key based retrieval methods.
     */
    protected void postFindByPrimaryKey() {
    }
#end

#if ( !$entity.isTransient() && !$entity.isNonPersistentParentEntity() )
    @Override
    protected ${entity.name}Repository getRepository() {
        return repository;
    }

    protected static ${entity.name}Repository getDefaultRepository() {
        ${entity.name}BO unusedBizObj = new ${entity.name}BO();
        return unusedBizObj.getRepository();
    }
#end


#foreach ($relation in $entity.relations)
    #if ( !$entity.isTransient() )
    @OneToMany(mappedBy="parent${entity.name}", cascade=CascadeType.ALL, fetch=FetchType.${relation.fetchMode.toUpperCase()}, orphanRemoval=true)
    #end
    private Set<${relation.type}BO> ${relation.uncapitalizedType}s;
#end
#foreach ($inverseRelation in $entity.inverseRelations)
    #if ( !$entity.isTransient() )
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="${inverseRelation.identifier.column}", referencedColumnName="${inverseRelation.identifier.parentColumn}", nullable=false)
    #end
    private ${inverseRelation.name}BO parent${inverseRelation.name};
#end
#foreach ($reference in $entity.references)
    #if ( !$entity.isTransient() && !$reference.isExternal())
        #if($reference.foreignKeyFields.iterator().hasNext()) 
    @ManyToOne(fetch=FetchType.EAGER #if($reference.isRequired()), optional=false#end) 
    @JoinColumn(name="${reference.foreignKeyFields.iterator().next().column}")    
        #end
        #if ( $reference.isRequired() )
    @NotNull
        #end
    #end
    #if (!$reference.isExternal())
        #if(!$reference.foreignKeyFields.iterator().hasNext()) 
    @Transient
        #end
    private ${reference.type}BO ${reference.name};
    #else
    @Transient
    private ${reference.type} ${reference.name};
    #end
    #if ($reference.isExternal() )
        #if($reference.foreignKeyFields.iterator().hasNext()) 
    @Inject
    @Transient
    private ${reference.type}MaintenanceDelegate ${reference.name}Delegate;
        #end
        #if($reference.foreignKeyFields.iterator().hasNext()) 
    @Column(name="${reference.foreignKeyFields.iterator().next().column}")
            #if ( $reference.isRequired() )
    @NotNull
            #end
    private ${reference.foreignKeyFields.iterator().next().javaType}    ${reference.name}Key;
        #end
    #end
#end

#if ( $entity.hasIdentifier())

    /**
     * Get the ${entity.identifier.name}.
     *
     * @return The ${entity.identifier.name}
     */
    protected ${entity.identifier.javaType} get${entity.identifier.capitalizedName}() {
        return ${entity.identifier.name};
    }

    /**
     * Set the ${entity.identifier.name}.
     *
     * @param The ${entity.identifier.name}
     */
    protected void set${entity.identifier.capitalizedName}(${entity.identifier.javaType} ${entity.identifier.name}) {
        this.${entity.identifier.name} = ${entity.identifier.name};
    }
#end

#foreach ( $field in $entity.fields)

#if ( $field.hasDefaultValue() )
    protected void setDefault${field.capitalizedName}() {
#if ($field.javaType == 'String')
        if (StringUtils.isEmpty(${field.name})) {
            set${field.capitalizedName}("${field.defaultValue}");
        }
#elseif ($field.javaType == 'BigDecimal')
        if (${field.name} == null) {
            BigDecimal defaultBigDecimal = new BigDecimal(${field.defaultValue});
            set${field.capitalizedName}(defaultBigDecimal);
        }
#elseif ($field.javaType == 'Long')
        if (${field.name} == null) {
            long defaultLong = ${field.defaultValue}L;
            set${field.capitalizedName}(defaultLong);
        }
#elseif ($field.javaType == 'Timestamp')
        if (${field.name} == null) {
            Timestamp defaultTimestamp = Timestamp.valueOf("${field.defaultValue}");
            set${field.capitalizedName}(defaultTimestamp);
        }
#elseif ($field.javaType == 'Date')
        if (${field.name} == null) {
            DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            Date defaultDate = null;
            try {
                defaultDate = formatter.parse("${field.defaultValue}");
            } catch (ParseException e) {
                throw new UnrecoverableException();
            }
            set${field.capitalizedName}(defaultDate);
        }
#else
        if (${field.name} == null) {
            set${field.capitalizedName}(${field.defaultValue});
        }
#end
    }
#end
    
    /**
  #if ($field.documentation)
     * Gets: ${field.documentation}.
  #else
     * Get the ${field.name}.
  #end
     *
     * @return The ${field.name}
     */
    public ${field.javaType} get${field.capitalizedName}() {
        return ${field.name};
    }
    
    /**
  #if ($field.documentation)
     * Sets: ${field.documentation}.
  #else
     * Set the ${field.name}.
  #end
     *
     * @param The ${field.name}
     */
    public void set${field.capitalizedName}(${field.javaType} ${field.name}) {
        #if($field.javaType == 'BigDecimal')
        if( ${field.name} == null ) {
            this.${field.name} = ${field.name};
        }else {
            this.${field.name} = ${field.name}.setScale($field.getScale(), RoundingMode.HALF_EVEN);
        }
        #else
        this.${field.name} = ${field.name};
        #end
    }
#end

#foreach ($inverseRelation in $entity.inverseRelations)

    /**
     * Set the parent ${inverseRelation.name} onto this instance.
     * @param parent The parent instance to set
     */
    public void set${inverseRelation.name}(${inverseRelation.name}BO parent) {
        parent${inverseRelation.name} = parent;
    }
    
    /**
     * Returns the parent of the type for this instance.
     * @return The parent instance or null if no parent of this type exists
     */
    public ${inverseRelation.name}BO get${inverseRelation.name}() {
        return parent${inverseRelation.name};
    }    
#end

#foreach ($relation in $entity.relations) 

    /**
  #if ($relation.documentation)
     * Sets: ${relation.documentation}.
  #else
     * Set the ${relation.uncapitalizedType} relation.
  #end
     * 
     * @param Set - The ${relation.uncapitalizedType}s
     */
    public void set${relation.type}s(Set<${relation.type}BO> ${relation.uncapitalizedType}s) {
        this.${relation.uncapitalizedType}s = ${relation.uncapitalizedType}s;
    } 

    /**
  #if ($relation.documentation)
     * Gets: ${relation.documentation}.
  #else
     * Get the ${relation.uncapitalizedType} relation.
  #end
     * 
     * @return Set - The ${relation.uncapitalizedType}s
     */
    public Set<${relation.type}BO> get${relation.type}s() {
        if( ${relation.uncapitalizedType}s == null ) {
            ${relation.uncapitalizedType}s = new HashSet<${relation.type}BO>();
        }
        
        return ${relation.uncapitalizedType}s;
    }
     
    /**
  #if ($relation.documentation)
     * Adds: ${relation.documentation}.
  #else
     * Add a ${relation.uncapitalizedType}.
  #end
     *
     * @param The ${relation.uncapitalizedType} to add
     */
    public void add${relation.type}(${relation.type}BO ${relation.uncapitalizedType}) {
        Set<${relation.type}BO> childSet = get${relation.type}s();
        if (childSet == null) {
            childSet = new HashSet<${relation.type}BO>();
            set${relation.type}s(childSet);
        }
        
        ${relation.uncapitalizedType}.set${entity.name}( (${entity.name}BO) this );
        childSet.add( ${relation.uncapitalizedType} );
    }
     
    /**
  #if ($relation.documentation)
     * Removes: ${relation.documentation}.
  #else
     * Remove a ${relation.uncapitalizedType}.
  #end
     *
     * @param The ${relation.uncapitalizedType} to remove
     */
    public ${relation.type}BO remove${relation.type}(${relation.type}BO ${relation.uncapitalizedType}) {
        if( get${relation.type}s().remove( ${relation.uncapitalizedType} ) ) {
            ${relation.uncapitalizedType}.set${entity.name}(null);
            
        } else {
            getLogger().error("Could not remove ${relation.uncapitalizedType} instance: " + ${relation.uncapitalizedType}.toString());
            
        }
        
        return ${relation.uncapitalizedType};
    }
#end
#if (!$entity.relations.isEmpty() && !$entity.isTransient())
    /**
     * Creates a {@link Specification} that eagerly fetches all 1-M relations that are 
     * present in {@link ${entity.name}BO}. 
     */
    protected static Specification<${entity.name}BO> eagerFetchRelations() {
        return new Specification<${entity.name}BO>() {

            @Override
            public Predicate toPredicate(Root<${entity.name}BO> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                for (PluralAttribute<? super ${entity.name}BO, ?, ?> fetch : root.getModel().getPluralAttributes()) {
                    root.fetch(fetch, JoinType.LEFT);
                }
                query.distinct(true);
                return null;
            }

        };
    }
    
    /**
     * Creates a {@link Specification} that filters {@link ${entity.name}BO}s that have an ${entity.identifier.name} that 
     * matches the given key. 
     */
    protected static Specification<${entity.name}BO> keyEquals(final ${entity.identifier.javaType} key) {
        return new Specification<${entity.name}BO>() {

            @Override
            public Predicate toPredicate(Root<${entity.name}BO> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                return cb.equal(root.get("${entity.identifier.name}"), key);
            }

        };
    }
#end
#foreach ($reference in $entity.references)
  #if ( !$reference.isExternal() )

    /**
     * Get the ${reference.name} reference.
     *
     * @return ${reference.type}BO - The ${reference.name}
     */
    public ${reference.type}BO get${reference.capitalizedName}() {
        return ${reference.name};
    }
     
    /**
     * Set the ${reference.name} reference.
     *
     * @param The ${reference.name}
     */
    public void set${reference.capitalizedName}(${reference.type}BO ${reference.name}) {
        this.${reference.name} = ${reference.name};
    }

  #else
    
    /**
     * Get the ${reference.name} reference.
     *
     * @return ${reference.type} - The ${reference.name}
     */
    public ${reference.type} get${reference.capitalizedName}() {
        #if ($reference.foreignKeyFields.iterator().hasNext())
        if ((${reference.name} == null) && (${reference.name}Key != null)) {
            this.${reference.name} = ${reference.name}Delegate.findByPrimaryKey(${reference.name}Key);
        }
        #end
        return ${reference.name};
    }
     
    /**
     * Set the ${reference.name} reference.
     *
     * @param The ${reference.name}
     */
    public void set${reference.capitalizedName}(${reference.type} ${reference.name}) {
        this.${reference.name} = ${reference.name};
        #if ($reference.foreignKeyFields.iterator().hasNext())
        this.${reference.name}Key = ${reference.name} != null ? ${reference.name}.get${reference.foreignKeyFields.iterator().next().getCapitalizedName()}() : null;
        #end
    }
  #end
                
#end
    
    /**
     * Executes field-level validations on all child relations.
     */
    @Override 
    protected void validateRelations() {
#if( !$entity.relations.isEmpty() )
        //call field validation on children:
  #foreach ($relation in $entity.relations)
        Set<${relation.type}BO> ${relation.uncapitalizedType}Set = get${relation.type}s();
        if (${relation.uncapitalizedType}Set != null && !${relation.uncapitalizedType}Set.isEmpty()) {
            for (${relation.type}BO child : ${relation.uncapitalizedType}Set) {
                child.validateFields();
            }
        }

  #end        
#end
    }    
    
    /**
     * Lifecycle method that is invoked before this business object's pre-save validation occurs to support
     * defaulting of field values that have been set in the entity metamodel.
     */
     #if( !$entity.isTransient() )
           @Override
     #end
     protected void defaultFieldValues() {
         #foreach ( $field in $entity.fields )
             #if ($field.hasDefaultValue())
                 setDefault${field.capitalizedName}();
             #end
         #end
     }
     
    /**
     * Executes all complex validation on child relations.
     */
    @Override 
    protected void complexValidationOnRelations() {
#if( !$entity.relations.isEmpty() )
        //call complex validation on children:
  #foreach ($relation in $entity.relations)
        Set<${relation.type}BO> ${relation.uncapitalizedType}Set = get${relation.type}s();
        if (${relation.uncapitalizedType}Set != null && !${relation.uncapitalizedType}Set.isEmpty()) {
            for (${relation.type}BO child : ${relation.uncapitalizedType}Set) {
                child.complexValidation();
            }
        }

  #end        
#end
    }

    /**
      * {@inheritDoc}
      */
      public String toString(){
         return ReflectionToStringBuilder.toString(this);
      }
      
      /**
      * Executes field-level validations on all references.
      */
      @Override 
      protected void validateReferences() {
        #foreach ($reference in $entity.references)
          #if ( !$reference.isExternal() )
            #if( !$entity.references.isEmpty() ) 
                ${reference.type}BO ${reference.name}Ref = get${reference.capitalizedName}();
                #if ($reference.foreignKeyFields.iterator().hasNext())
                if ((${reference.name}Ref != null && ${reference.name}Ref.getKey() != null)) {
                    ${reference.type}BO found${reference.type}Ref = ${reference.type}BO.findByPrimaryKey(${reference.name}Ref.getKey());
                    this.checkIfReferenceExists("${reference.name}", found${reference.type}Ref);
                }
                #elseif ($reference.isRequired() )
                this.checkIfReferenceExists("${reference.name}", ${reference.name}Ref);
                #else
                if (${reference.name}Ref != null) {
                    this.checkIfReferenceExists("${reference.name}", ${reference.name}Ref);
                }
                #end
            #end
          #else
            #if( !$entity.references.isEmpty() ) 
                ${reference.type} ${reference.name}Ref = get${reference.capitalizedName}();
                #if ($reference.foreignKeyFields.iterator().hasNext())
                if ((${reference.name}Ref != null && ${reference.name}Key != null)) {
                    ${reference.type} found${reference.type}Ref = ${reference.name}Delegate.findByPrimaryKey(${reference.name}Key);
                    this.checkIfReferenceExists("${reference.name}", found${reference.type}Ref);
                }
                #elseif ($reference.isRequired() )
                this.checkIfReferenceExists("${reference.name}", ${reference.name}Ref);
                #else
                if (${reference.name}Ref != null) {
                    this.checkIfReferenceExists("${reference.name}", ${reference.name}Ref);
                }
                #end
            #end
          #end
        #end
      }
      
}
