[main]
# We will just use a plain text token to authenticate:
simpleTokenAuthenticator = org.pac4j.http.credentials.authenticator.test.SimpleTestTokenAuthenticator

# Configure a client that is looking for the token in http header named username:
headerClient = org.pac4j.http.client.direct.HeaderClient
headerClient.headerName = username
headerClient.authenticator = $simpleTokenAuthenticator

clients = org.pac4j.core.client.Clients
clients.clients = $headerClient

# Override any default authorization as we are only using buji-pac4j for authentication.
# You can see buji-pac4j for support useful scenarios like CSRF tokens through authorizers, if desired:
isAuthenticatedAuthorizer = org.pac4j.core.authorization.authorizer.IsAuthenticatedAuthorizer

# If no matchers are listed, the default applied will include XFrameOptions which we don't want
noCacheMatcher = org.pac4j.core.matching.matcher.CacheControlMatcher
noSniffMatcher = org.pac4j.core.matching.matcher.XContentTypeOptionsMatcher
hstsMatcher = org.pac4j.core.matching.matcher.StrictTransportSecurityMatcher 
xssProtectionMatcher = org.pac4j.core.matching.matcher.XSSProtectionMatcher
csrfTokenMatcher = org.technologybrewery.fermenter.stout.authn.ModifiedCsrfTokenGeneratorMatcher

config = org.pac4j.core.config.Config
config.clients = $clients
# This call actually does the overriding of default authorization routines so it just validates the user was authenticated, otherwise you'll get CSRF, etc:
config.authorizers = isAuthenticated:$isAuthenticatedAuthorizer
config.matchers = nocache:$noCacheMatcher,nosniff:$noSniffMatcher,hsts:$hstsMatcher,xssprotection:$xssProtectionMatcher,csrfToken:$csrfTokenMatcher

# Configure the servlet filter to use the above configurations:
headerSecurityFilter = org.technologybrewery.fermenter.stout.authn.ModifiedSecurityFilter
headerSecurityFilter.config = $config
headerSecurityFilter.clients = headerClient
headerSecurityFilter.authorizers = isAuthenticated
headerSecurityFilter.matchers = nocache:$noCacheMatcher,nosniff:$noSniffMatcher,hsts:$hstsMatcher,xssprotection:$xssProtectionMatcher,csrfToken:$csrfTokenMatcher

[urls]
# Map the header filter to urls:
/** = headerSecurityFilter
