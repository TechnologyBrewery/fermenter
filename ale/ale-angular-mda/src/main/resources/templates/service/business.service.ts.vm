import { Injectable } from '@angular/core';
import { FermenterResponse } from '../../../shared/model/fermenter-response.model';
import { GlobalErrorHandler } from '../../../shared/global-error-handler.service';
import { Constants } from '../../../constants';
import { HttpClient, HttpParams } from '@angular/common/http';
import { map, catchError } from 'rxjs/operators';
import { Observable } from 'rxjs';
import { BusinessError } from '../../../generated/business-error.model';
import { PageWrapper } from '../../../shared/model/page-wrapper.model';

#foreach( $import in $service.imports )
#if( !$import.isEnumeration() )
import { ${import.type} } from '../../../shared/model/${import.typeLowerHyphen}.model';
#end## end if enum
#end## end for imports

/*******************************************************
 * Business services for ${service.name}Service
 *
 * Generated Code - DO NOT MODIFY
 * Template = business.service.ts.vm
 *******************************************************/
@Injectable({
  providedIn: 'root'
})
export class ${service.name}Service {

    protected constants = new Constants();

    // make sure that the ${service.artifactIdUpperUnderscore}_END_POINT is
    //    defined in the constants.ts file so that we know where the rest service is located
    protected ${service.name}ServiceURL =
      this.constants.${service.artifactIdUpperUnderscore}_END_POINT + '/${service.name}Service';

    constructor(
      protected http: HttpClient,
      protected errorHandler: GlobalErrorHandler
      ) {}

#foreach( $operation in $service.angularOperations )
#if( !$operation.usesEnumerations() )## pending support for enums
    /**
    * Call the ${operation.nameLowerCamel} operation on ${service.name}Service
    * ${operation.documentation}
    */
    public ${operation.getAngularMethodSignature()} {
        // is paged response: $operation.return.isPagedResponse()
        const url = this.${service.name}ServiceURL + '/${operation.nameLowerCamel}' ;

#if(!$operation.parameters.isEmpty() )
        let params = new HttpParams();
#foreach( $param in $operation.parameters)
#if($param.isMany())
        for(const ${param.name}Single of ${param.name}) {
            if(${param.name}Single !== null && ${param.name}Single !== undefined) {
                params = params.append('${param.name}', String(${param.name}Single));
            }
        }
#elseif (!$param.isEntity())
        if(${param.name} !== null && ${param.name} !== undefined) {
            params = params.set('${param.name}', String(${param.name}));
        }
#end## end of if is many
#end## end of for loop
#end## end for if params is empty

##
#if($operation.isGETRestCall())
#if(!$operation.parameters.isEmpty())
        return this.http.get<FermenterResponse<${operation.return.signature}>>(url, {params}).pipe(
#else
        return this.http.get<FermenterResponse<${operation.return.signature}>>(url).pipe(
#end## end of if has params
#else## else of isGETRestCall
#if(!$operation.parameters.isEmpty())
        return this.http.post<FermenterResponse<${operation.return.signature}>>(url, ${operation.postBodyParameterName}, {params}).pipe(
#else## else for if params is empty
        return this.http.post<FermenterResponse<${operation.return.signature}>>(url, ${operation.postBodyParameterName}).pipe(
#end## end of if has params
#end## end of isGETRestCall
##
            map((response: FermenterResponse<${operation.return.signature}>) => {
                const fermenterResponse = new FermenterResponse<${operation.return.signature}>(response);
                this.checkFermenterResponseIsInitialized(fermenterResponse);

#if(!$operation.return.isMany() && !$operation.return.isPagedResponse())
##
#if($operation.return.isBaseType() && $operation.return.angularTypeBase != 'Date')
                fermenterResponse.value = response.value;
#else
                if (response.value) {
                    fermenterResponse.value = new ${operation.return.angularType}(response.value);
                }
#end
#else## else of is many / paged response
##
#if($operation.return.isPagedResponse())
                const responseArray = response.value.content;
#else
                const responseArray = response.value;
#end## end of if is paged response
                const arrayOfElements = new Array<${operation.return.angularType}>();
                if (response.value) {
                    for (const element of responseArray) {
#if($operation.return.isBaseType() && $operation.return.angularTypeBase != 'Date')
                        arrayOfElements.push(element);
#else
                        arrayOfElements.push(new ${operation.return.angularType}(element));
#end
                    }
                }
#if($operation.return.isPagedResponse())
                fermenterResponse.value = new PageWrapper<${operation.return.angularType}>(response.value);
                fermenterResponse.value.content = arrayOfElements;
#elseif($operation.return.isMany())
                fermenterResponse.value = arrayOfElements;
#end## end of if is paged response
##
#end## end of isMany / paged response

                if (fermenterResponse.messages.hasErrorMessages() && !skipGlobalErrorHandler) {
                    throw new BusinessError(fermenterResponse.messages);
                }
#if( $operation.isGETRestCall() )
                return fermenterResponse.value;
#else
                return fermenterResponse;
#end## end of return type void
            }),
            catchError(error => this.errorHandler.handleServiceCallError(error))
        );
    }
#else
    /**
    * ${operation.nameLowerCamel} is not implemeneted because support for enums is pending
    */
    public ${operation.nameLowerCamel}_PENDING(NOT_SUPPORTED: string) {
        throw new Error('${operation.nameLowerCamel} is not implemeneted because support for enums and paging is pending');
    }
#end## end of if usesEnumerations
#end## end of for operation

    protected checkFermenterResponseIsInitialized(fermenterResponse: FermenterResponse<{}>) {
        if (!fermenterResponse) {
            const msg = 'Failed to initialize fermenter response for service call.';
            this.errorHandler.handleServiceCallError(msg);
            throw new Error(msg);
        }
    }
}
