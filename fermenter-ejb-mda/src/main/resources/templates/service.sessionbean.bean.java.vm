package ${basePackage}.service.ejb;

#foreach( $import in $service.imports )
import $import;
#end

import ${basePackage}.bizobj.*;
import ${basePackage}.transfer.*;

import javax.annotation.Resource;
import javax.ejb.EJBContext;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.inject.Inject;

import org.tigris.atlas.messages.InjectableMessages;
import org.tigris.atlas.messages.ThreadLocalMessages;
import org.tigris.atlas.service.ValueServiceResponse;
import org.tigris.atlas.service.VoidServiceResponse;

/**
 * Service session bean for the ${service.name} service.
 *
 * Generated Code - DO NOT MODIFY
 */
public abstract class ${service.name}BaseService {

	@Inject
	private InjectableMessages messages;	

	@Resource
	private EJBContext ejbContext;
	
#foreach( $operation in $service.operations )
	/**
	 * {@inheritDoc}
	 */
	@TransactionAttribute(TransactionAttributeType.${operation.transactionAttribute})
	@ThreadLocalMessages
	#if($operation.isReturnTypeCollection())	 
	public ValueServiceResponse<Collection<${operation.returnManyType}>> ${operation.lowercaseName}(${operation.signature}) {
	#elseif($operation.isResponseTypeVoid())
	public VoidServiceResponse ${operation.lowercaseName}(${operation.signature}) {
	#elseif($operation.isReturnTypeEntity())	 
	public ValueServiceResponse<${operation.returnType}> ${operation.lowercaseName}(${operation.signature}) {
	#else 
	public ValueServiceResponse<${operation.wrappedReturnType}> ${operation.lowercaseName}(${operation.signature}) {
	#end

	#if( $operation.parameters.size() > 0 )
		#foreach( $parameter in $operation.parameters )
			#if( $parameter.isEntity() && $parameter.isMany() )
				List<${parameter.type}BO> ${parameter.name}BOs = ${parameter.type}Assembler.get${parameter.type}BOList(${parameter.name});
			#elseif ( $parameter.isEntity() && !$parameter.isMany() )
				${parameter.type}BO ${parameter.name}BO = ${parameter.type}Assembler.merge${parameter.type}BO(${parameter.name}, null);
			#end
		#end
	#end	
		
	#if( $operation.isReturnTypeCollection() )
		Collection<${operation.returnManyTypeAsBO}> implResult = 
	#elseif( $operation.isReturnTypeEntity() )
		${operation.returnTypeAsBO} implResult =
	#elseif( $operation.isResponseTypeVoid() )
	#else
		${operation.wrappedReturnType} implResult =
	#end
		${operation.lowercaseName}Impl(
	#foreach( $parameter in $operation.parameters )			
		#if( $parameter.isEntity() && $parameter.isMany() )
				${parameter.name}BOs
		#elseif ( $parameter.isEntity() && !$parameter.isMany() )
				${parameter.name}BO
		#else
				${parameter.name}
		#end
		#if( $foreach.hasNext ),#end
	#end
		);
		
	#if($operation.isReturnTypeCollection())
		Collection<${operation.returnManyType}> result = ${operation.returnManyType}Assembler.get${operation.returnManyType}List(implResult);
		ValueServiceResponse<Collection<${operation.returnManyType}>> response = new ValueServiceResponse<Collection<${operation.returnManyType}>>(result, this.messages);
	#elseif($operation.isReturnTypeEntity())	
		${operation.returnType} result = ${operation.returnType}Assembler.create${operation.returnType}(implResult);
		ValueServiceResponse<${operation.returnType}> response = new ValueServiceResponse<${operation.returnType}>(result, this.messages);
	#elseif( $operation.isResponseTypeVoid() )
		VoidServiceResponse response = new VoidServiceResponse(this.messages);
	#else
		ValueServiceResponse<${operation.wrappedReturnType}> response = new ValueServiceResponse<${operation.wrappedReturnType}>(implResult, this.messages);
	#end
			
		if (this.messages.hasErrorMessages()) {
			this.ejbContext.setRollbackOnly();
		}
		return response;
	}
	
	/**
	 * Performs the business function for ${operation.name}.
	#if( $operation.parameters.size() > 0 )
		#foreach( $parameter in $operation.parameters )
			#if( $parameter.documentation )
	 * @param ${parameter.name} ${parameter.documentation}
			#else
	 * @param ${parameter.name}  
			#end
		#end
	#end
	#if($operation.isReturnTypeCollection())	 
	 * @return A {@link Collection} of {@link ${operation.returnManyTypeAsBO}}
	#elseif($operation.isResponseTypeVoid()) 	 
	 * @return A instance of {@link ${operation.returnManyTypeAsBO}}
	#end
	 */
	#if($operation.isReturnTypeCollection())	 
	protected abstract Collection<${operation.returnManyTypeAsBO}> ${operation.lowercaseName}Impl(${operation.signatureWithBO});
	#elseif($operation.isResponseTypeVoid())
	protected abstract void ${operation.lowercaseName}Impl(${operation.signatureWithBO});
	#elseif($operation.isReturnTypeEntity())
	protected abstract ${operation.returnTypeAsBO} ${operation.lowercaseName}Impl(${operation.signatureWithBO});
	#else
	protected abstract ${operation.wrappedReturnType} ${operation.lowercaseName}Impl(${operation.signatureWithBO});
	#end
 
#end

}