package ${basePackage}.bizobj;

#if ( !$entity.isTransient() && !$entity.isNonPersistentParentEntity() )
import javax.persistence.Entity;
import javax.persistence.Table;
#end

#if ( $entity.isNonPersistentParentEntity() )
import java.io.Serializable;
import javax.persistence.MappedSuperclass;
import org.springframework.data.jpa.repository.JpaRepository;
#else
import org.bitbucket.fermenter.stout.util.SpringAutowiringUtil;
#end
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Business object for the ${entity.name} entity.
 * @see ${basePackage}.bizobj.${entity.name}BaseBO
 *
 * GENERATED STUB CODE - PLEASE *DO* MODIFY
 */
#if ( !$entity.isTransient() && !$entity.isNonPersistentParentEntity() )
@Entity
@Table(name="${entity.table}")
#end
#if (!$entity.isNonPersistentParentEntity())
public class ${entity.name}BO extends ${entity.name}BaseBO {
	
	public ${entity.name}BO() {
		super();
		SpringAutowiringUtil.autowireBizObj(this);
	}
#else
@MappedSuperclass
public abstract class ${entity.name}BO<PK extends Serializable, BO, JPA extends JpaRepository<BO, PK>> 
		extends ${entity.name}BaseBO<PK, BO, JPA> {
#end	
	
	private static final Logger LOGGER = LoggerFactory.getLogger(${entity.name}BO.class);
	
	@Override
	protected Logger getLogger() {
		return LOGGER;
	}
    
    /**
    * Lifecycle method that is invoked when saving ${entity.name} via a creation or update, 
    * only if the entity's fields were validated successfully. 
    * 
    * If ${entity.name} requires additional business logic in order to validate its data prior to saving, 
    * implement that logic here.
    * 
    * @see <a href="https://fermenter.atlassian.net/wiki/spaces/FER/pages/62128129/Stout#Stout-Savelifecycle">Stout: Save Lifecycle</a>
    */
	@Override
	protected void complexValidation() {
        /* add complex validation logic here */
	}
}