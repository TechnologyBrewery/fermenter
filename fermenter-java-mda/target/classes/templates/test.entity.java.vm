package ${testPrefix}.delegate;

import ${prefix}.entity.${entityName};
#foreach( $relation in $relations )
import ${prefix}.entity.${relation.type};
#foreach( $childRelation in $relation.childRelations )
import ${prefix}.entity.${childRelation.type};
#end
#end


/**
 * Test basic persistence operations for the ${entityName} application entity
 *
 * @author Generated by EAF tools
 */
 
public class Test${entityName} extends Test${entityName}Base {

	
	/**
	 * Set the initial values for the tests
	 *
	 * Subclass responsibility
	 */
	protected void setInitialValues(${entityName} entity) {
	}
	
	/**
	 * Update the ${entityName} with some new values
	 *
	 * Subclass responsibility
	 */
	protected ${entityName} update(${entityName} entity) {
		// TO-DO Set ${entityName} values here
		
		return entity;
	}
#foreach( $relation in $relations ) 

	/**
	 * Create a new ${relation.type} and add it to the ${entityName}
	 */
	protected ${relation.type} add${relation.type}(${entityName} entity) {
		${relation.type} child = entity.new${relation.type}();
		
		// TO-DO Set child fields here
		
		entity.add${relation.type}( child );
		return child; 
	}
	
	/**
	 * Update the ${relation.type} with some new values
	 */
	protected ${relation.type} update${relation.type}(${relation.type} child) {
		// TO-DO Update values here
		
		return child;
	}
	
	/**
	 * Compare the persisted ${relation.type} with what we saved.
	 */
	protected boolean compare${relation.type}(${relation.type} child) {
		return true;
	}
#foreach( $childRelation in $relation.childRelations )

	/**
	 * Create a new ${childRelation.type} and add it to the ${entityName}->${relation.type}
	 */
	protected ${childRelation.type} add${childRelation.type}(${relation.type} child) {
		${childRelation.type} grandChild = child.new${childRelation.type}();
		
		// TO-DO Set grandChild fields here
		
		child.add${childRelation.type}( grandChild );
		return grandChild; 
	}
	
	/**
	 * Update the ${childRelation.type} with some new values
	 */
	protected ${childRelation.type} update${childRelation.type}(${childRelation.type} grandChild) {
		// TO-DO Update values here
		
		return grandChild;
	}
	
	/**
	 * Compare the persisted ${childRelation.type} with what we saved.
	 * Subclass responsibility.
	 */
	protected boolean compare${childRelation.type}(${childRelation.type} grandChild) {
		return true;
	}
#end
#end
	
	/**
	 * Make sure the saved entity is what we intended
	 *
	 */
	protected boolean compare(${entityName} entity) {
		boolean b = true;
		
#foreach( $relation in $relations )
		if( entity.get${relation.type}s().size() > 0 ) {
			${relation.type} child = (${relation.type}) entity.get${relation.type}s().iterator().next();
			b = b && compare${relation.type}( child );
#foreach( $childRelation in $relation.childRelations )
			if( child.get${childRelation.type}s().size() > 0 ) {
				${childRelation.type} grandChild = (${childRelation.type}) child.get${childRelation.type}s().iterator().next();
				b = b && compare${childRelation.type}( grandChild );
			}
#end
		}
#end

		return b;
	}
}