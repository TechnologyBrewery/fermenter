package ${prefix}.persist.hibernate;

import java.io.Serializable;
#if( $queries.size() > 0 )
import java.util.List;
#foreach($query in $queries)
#foreach($criteria in $query.criteria)
import ${criteria.import};
#end
#end
#end

import org.tigris.atlas.persist.hibernate.AbstractHibernateDaoImpl;

import ${prefix}.bizobj.${entity.name}BO;
import ${prefix}.transfer.TransferObjectFactory;
import ${prefix}.transfer.${entity.name};
import ${prefix}.transfer.${entity.name}PK;
import ${prefix}.persist.${entity.name}BaseDao;

import org.hibernate.Hibernate;
import org.hibernate.type.*;

#foreach ($import in $imports )
import ${import};
#end

/**
 * Data access object for the ${entityName} application entity.
 *
 * Generated Code - DO NOT MODIFY
 */
public abstract class ${entity.name}BaseDaoImpl extends AbstractHibernateDaoImpl<${entity.name}BO, ${entity.name}PK> implements ${entity.name}BaseDao {
		
	## developers will have to implement this method if the entity uses a composite ID
#set ($idFields = $entity.denormalizedIdFields.values())
#if ($idFields.size() == 1)
	/**
     * Creates a new {@link ${entity.name}PK} wrapper based on the given ${idFields.toArray()[0].javaType} ID value that was 
     * generated by Hibernate.
     * 
     * @param persistentIDValue
     *            ID that was created by Hibernate as a result of making a transient {@link ${entity.name}BO} persistent.
     * @return wrapper {@link ${entity.name}PK} object that encapsulates the newly created {@link ${entity.name}BO}'s ID.
     */
	@Override
    protected ${entity.name}PK getNewPKWrapperForPersistentIDValue(Serializable persistentIDValue) {
		${entity.name}PK pk = TransferObjectFactory.create${entity.name}PK();
		pk.set${idFields.toArray()[0].capitalizedName}((${idFields.toArray()[0].javaType}) persistentIDValue);
		return pk;
	}
#end

	/**
     * Returns the underlying {@link ${entity.name}BO} implementation {@link Class} whose data access logic is managed by
     * this DAO.
     * 
     * @return
     */
    @Override
    protected Class<${entity.name}BO> getBusinessObjectClazz() {
    	return ${entity.name}BO.class;
    }

    /**
     * Returns the logical name for the entity whose data access logic is managed by this DAO.
     * 
     * @return
     */
    @Override
    protected String getEntityName() {
    	return ${entity.name}.ENTITY;
    }
    	
#foreach( $query in $queries )	

	/**
	 * Execute the ${query.name} query.
	 *
#foreach( $criterion in $query.criteria )
	 * @param ${criterion.name} The ${criterion.name}
#end
	 * @return List of {@link ${entity.name}}s
	 */	 
#set( $numCriteria = $query.criteria.size() ) 
#set( $currentNum  = 0 )
	public List<${entity.name}BO> ${query.lowercaseName}(#foreach( $criterion in $query.criteria )${criterion.javaType} ${criterion.name} #set($currentNum = $currentNum+1)#if($currentNum<$numCriteria), #end#end) {
#set( $cn = 0 )
		String[] paramNames = new String[] { #foreach( $criterion in $query.criteria )"${criterion.name}" #set($cn = $cn+1)#if($cn<$numCriteria), #end#end}; 
#set( $cn = 0 )
		Object[] paramValues = new Object[] { #foreach( $criterion in $query.criteria )${criterion.name} #set($cn = $cn+1)#if($cn<$numCriteria), #end#end }; 
#set( $cn = 0 )
		Type[] paramTypes = new Type[] { #foreach( $criterion in $query.criteria )#if($criterion.isSimpleType())${criterion.getJavaType()}Type.INSTANCE#set($cn = $cn+1)#if($cn<$numCriteria),#end#else Hibernate.custom(${criterion.type}UserType.class) #set($cn = $cn+1)#if($cn<$numCriteria), #end #end #end};
		
		return query( ${entity.name}BaseDao.${query.name}, paramNames, paramValues, paramTypes );
	}
#end

}