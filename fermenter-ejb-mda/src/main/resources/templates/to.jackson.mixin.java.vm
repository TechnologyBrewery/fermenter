package ${prefix}.transfer.json;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.annotate.JsonProperty;

import ${prefix}.transfer.*;
#foreach ($import in $imports )
import ${import};
#end
#foreach( $reference in $references ) 
#if( $reference.isExternal() )
import ${reference.importPrefix}.transfer.${reference.type};
import ${reference.importPrefix}.transfer.${reference.type}PK;
#end
#end
#foreach ($composite in $composites)
import ${prefix}.transfer.${composite.type}Composite;
#end
import org.tigris.atlas.transfer.*;
import org.tigris.atlas.messages.Messages;

#if( $relations.size() > 0 )  
import java.util.Set;
#end

/**
 * Transfer object json contract for the ${entityName} application entity.
#if ($entity.documentation)
 * ${entity.documentation}
#end
 *
 * Generated Code - DO NOT MODIFY
 */
public abstract class ${entityName}MixIn {

#foreach ( $idField in $idFields )
	@JsonProperty
	private ${idField.javaType} ${idField.name};
#end
#if ($useOptimisticLocking)
	@JsonProperty	 
	private Integer oplock;
#end
#foreach ( $field in $fields )
	@JsonProperty
	private ${field.javaType} ${field.name};
#end
#foreach ($relation in $relations)
	@JsonProperty
	private Set<${relation.type}> ${relation.label}s;
#end
#foreach ($inverseRelation in $inverseRelations)
	//TODO: update this if we have multiple parents for an instance
	@JsonIgnore
	private ${inverseRelation.name} parent${inverseRelation.name};
#end
#foreach ($reference in $references)
	@JsonProperty
	private ${reference.type} ${reference.name};
#end
#foreach ($composite in $composites)
	@JsonProperty
	private ${composite.type}Composite ${composite.name}Composite;
#end

	@JsonIgnore
	private Messages messages;

	@JsonIgnore
	public abstract String getEntityName();

#if ( $idFields.size() > 0 )
	@JsonIgnore
	public abstract PrimaryKey getKey();
	
	@JsonIgnore
	public abstract ${entityName}PK get${entityName}PK();
	
	@JsonIgnore
	public abstract void setKey(PrimaryKey pk);
	 
	@JsonIgnore
	public abstract void set${entityName}PK(${entityName}PK pk);
#else

	@JsonIgnore
	public abstract PrimaryKey getKey();
	
	@JsonIgnore
	public abstract void setKey(PrimaryKey key);
#end	 

	@JsonIgnore
	public abstract Messages getAllMessages();
	
#foreach ($inverseRelation in $inverseRelations)
	@JsonIgnore
	public abstract ${inverseRelation.name} get${inverseRelation.name}();
	
	@JsonIgnore
	public abstract void set${inverseRelation.name}(${inverseRelation.name} parent);	
#end	

}
