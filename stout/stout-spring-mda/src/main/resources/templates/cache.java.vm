package ${basePackage}.client.cache;

import java.util.Collection;
import java.util.concurrent.TimeUnit;

import ${basePackage}.transfer.${entity.name};

#foreach ($import in $entity.imports )
import ${import};
#end

import org.apache.commons.lang3.StringUtils;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import org.aeonbits.owner.KrauseningConfigFactory;
import ${basePackage}.client.config.CachePropertiesConfig;

/**
 * Rest client cache for ${entity.name}.
 *
 * Generated from cache.java.vm
 */
public class ${entity.name}Cache {

    private static Cache<${entity.identifier.javaType}, ${entity.name}> cache;
    private static final CachePropertiesConfig cachePropertiesConfig = KrauseningConfigFactory.create(CachePropertiesConfig.class);

    static {
        cache = Caffeine.newBuilder()
                .expireAfterAccess(cachePropertiesConfig.getCacheTimeoutMinutes(), TimeUnit.MINUTES)
                .maximumSize(cachePropertiesConfig.getCacheMaxSizePerBO())
                .build();
    }

    private ${entity.name}Cache() {
        // prevent instantiation of all static classes
    }

    /**
	 * Add the BO to the cache for faster future lookup.
     * 
	 * @param ${entity.name.toLowerCase()}
	 */
    public static void addToCache(${entity.name} ${entity.name.toLowerCase()}) {
		#if ( $entity.identifier.javaType == 'String' )
		String trimmedId = (${entity.name.toLowerCase()} != null) ? StringUtils.trimToNull(${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}()) : null;
        if (trimmedId != null) {
            cache.put(trimmedId, ${entity.name.toLowerCase()});
        }
		#else
        if (${entity.name.toLowerCase()} != null && ${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}() != null) {
            cache.put(${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}(), ${entity.name.toLowerCase()});
        }
		#end
    }

    /**
	 * Add multiple BOs to the cache for faster future lookup.
     * 
	 * @param ${entity.name.toLowerCase()}s
	 */
    public static void addToCache(Collection<${entity.name}> ${entity.name.toLowerCase()}s) {
        for (${entity.name} ${entity.name.toLowerCase()} : ${entity.name.toLowerCase()}s) {
            addToCache(${entity.name.toLowerCase()});
        }
    }

    /**
     * Get BO from cache by ID.
     * 
     * @param entityId
     * @return BO from cache, returns null if not available
     */
    public static ${entity.name} getFromCache(${entity.identifier.javaType} entityId) {
	  #if ( ${entity.identifier.javaType} == 'String' )
	    String trimmedId = StringUtils.trimToNull(entityId);
	    ${entity.name} ${entity.name.toLowerCase()} = null;
		if (trimmedId != null) {
			${entity.name.toLowerCase()} = cache.getIfPresent(trimmedId);
		} 
		return ${entity.name.toLowerCase()};
	  #else
		return cache.getIfPresent(entityId);
	  #end
    }

    /**
     * Discards all BOs from cache.
     */
    public static void invalidateCache() {
        cache.invalidateAll();
    }
    
    /**
     * Discards specific BO from cache based on ID.
     * 
     * @param ${entity.name.toLowerCase()}Id
     */
    public static void removeFromCache(${entity.identifier.javaType} ${entity.name.toLowerCase()}Id) {
	  #if ( ${entity.identifier.javaType} == 'String' )
        String trimmedId = StringUtils.trimToNull(${entity.name.toLowerCase()}Id);
        if (trimmedId != null){ 
		    cache.invalidate(trimmedId);
		}
	  #else
		cache.invalidate(${entity.name.toLowerCase()}Id);
	  #end
    }

    /**
     * Discards specific BO from cache based.
     * 
     * @param ${entity.name.toLowerCase()}
     */
    public static void removeFromCache(${entity.name} ${entity.name.toLowerCase()}) {
	  #if ( ${entity.identifier.javaType} == 'String' )
	    String trimmedId = (${entity.name.toLowerCase()} != null) ? StringUtils.trimToNull(${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}()) : null;
        if (trimmedId != null) {
            removeFromCache(trimmedId);
        }
	  #else
        if (${entity.name.toLowerCase()} != null && ${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}() != null) {
            removeFromCache(${entity.name.toLowerCase()}.get${entity.identifier.capitalizedName}());
        }
	  #end
    }

}
