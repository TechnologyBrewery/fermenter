package ${basePackage}.client.service;

import feign.Param;
import ${basePackage}.transfer.${entity.name};
import org.technologybrewery.fermenter.stout.page.PageWrapper;
import org.technologybrewery.fermenter.stout.page.json.FindByExampleCriteria;

import java.util.Collection;

#foreach( $import in $entity.idFieldImports )
import $import;
#end

/**
 * Service delegate interface for ${entity.name} entity maintenance.
 *
 * Generated Code - DO NOT MODIFY
 *
 * Generated from ${templateName}
 */
public interface ${entity.name}MaintenanceDelegate {

    /**
     * Find the ${entity.name} by primary key
     *
     * @param ${id.name} The primary key value ${id.name} for the ${entity.name} to retrieve
     * @return a service response containing the retrieved entity and/or any collected messages
     */
    ${entity.name} findByPrimaryKey(@Param("id") ${entity.identifier.javaType} ${entity.identifier.name});

    /**
     * Create the provided instance.
     *
     * @param entity The ${entity.name} instance to save
     * @return a service response containing the saved entity and/or any collected messages
     */
    ${entity.name} create(${entity.name} entity);

    /**
     * Save or update the provided instance.
     *
     * @param ${entity.identifier.name} The primary key value ${entity.identifier.name} for the ${entity.name}
     * @param entity The ${entity.name} instance to save
     * @return a service response containing the saved entity and/or any collected messages
     */
    ${entity.name} update(@Param("id") ${entity.identifier.javaType} ${entity.identifier.name}, ${entity.name} entity);

    /**
     * Find by example
     *
     * @return a service response containing entities from search and/or any collected messages
     */
    PageWrapper<${entity.name}> findByExample(FindByExampleCriteria<${entity.name}> criteria);
    
    /**
     * Find by example contains
     *
     * @return a service response containing entities from search and/or any collected messages
     */
    Collection<${entity.name}>  findByExampleContains(${entity.name} probe);
    
    /**
     * Find by example contains that starts on a specific page with count
     *
     * @return a service response containing entities from search and/or any collected messages
     */
    PageWrapper<${entity.name}>  findByExampleContainsPaged(${entity.name} probe, @Param("startPage") int startPage, @Param("count") int count);
    
    /**
     * Find by example matches
     *
     * @return a service response containing entities from search and/or any collected messages
     */
    Collection<${entity.name}>  findByExampleMatches(${entity.name} probe);
    
    /**
     * Find by example matches that starts on a specific page with count
     *
     * @return a service response containing entities from search and/or any collected messages
     */
    PageWrapper<${entity.name}>  findByExampleMatchesPaged(${entity.name} probe, @Param("startPage") int startPage, @Param("count") int count);

    /**
     * Deletes the ${entity.name} entity with the provided primary key value.
     *
     * @param ${entity.identifier.name} The primary key value ${entity.identifier.name} for the ${entity.name} to delete
     * @return response wrapper containing any collected messages
     */
    void delete(@Param("id") ${entity.identifier.javaType} ${entity.identifier.name});
    
    /**
     * Create a collection of ${entity.name} instances.
     *
     * @param entities The collection of ${entity.name} instances to save
     * @return collection of saved entity
     */
    Collection<${entity.name}> bulkSaveOrUpdate(Collection<${entity.name}> entities);
    
    /**
     * Delete a collection of ${entity.name} instances.
     *
     * @param entities The collection of ${entity.name} instances to delete
     */
    void bulkDelete(Collection<${entity.name}> entities);
    
     /**
     * Flushes the transactionally-cached create, update associated with this delegate. Separate from delete as the
     * often need to happen in reverse order for referential integrity.
     */
    void flushInsertsAndUpdates();

    /**
     * Flushes the deletes associated with this delegate. Separate from insert and update as the often need to happen in
     * reverse order for referential integrity.
     */
    void flushDeletes();
}
