package ${basePackage}.service.impl;

import org.tigris.atlas.service.AbstractService;

#foreach( $import in $service.imports )
import $import;
#end

import ${basePackage}.service.${service.name}Service;

/**
 * Service implementation class for the ${service.name} service
 * @see ${basePackage}.service.${service.name}Service
 */
public abstract class ${service.name}ServiceBaseImpl extends AbstractService implements ${service.name}Service {
#foreach( $operation in $service.operations )

	/**
	 * Execute the ${operation.name} service
	 * @see ${basePackage}.service.${service.name}Service#${operation.name}()
	 */
	final public ${operation.responseType} ${operation.lowercaseName}(${operation.signature}) {
		${operation.responseType} response = new ${operation.responseType}();
		
		try {
			begin();
#if( $operation.parameters.size() > 0 )
			${operation.lowercaseName}Impl(${operation.parameterNames}, response);
#else
			${operation.lowercaseName}Impl(response);
#end
			if( response.hasErrors() ) {
				rollback();
			}
			else {
				commit();
			}
		}
		catch(Throwable t) {
			rollback();
		}
		
		return response;
	}
	
	/**
	 * The actual business logic for the ${operation.lowercaseName} operation.
	 * Sublass responsibility to implement.
	 */
#if( $operation.parameters.size() > 0 )
	protected abstract void ${operation.lowercaseName}Impl(${operation.signature}, ${operation.responseType} response);
#else
	protected abstract void ${operation.lowercaseName}Impl(${operation.responseType} response);
#end

#end
}