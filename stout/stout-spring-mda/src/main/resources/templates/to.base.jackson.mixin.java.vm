package ${basePackage}.transfer.json;

import org.slf4j.Logger;
#if (!$entity.inverseRelations.isEmpty())
import com.fasterxml.jackson.annotation.JsonBackReference;
#end
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
#if( !$entity.relations.isEmpty() )
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonManagedReference;
#end

import ${basePackage}.bizobj.*;
#if (!$entity.isTransient() && !$entity.isNonPersistentParentEntity())
import ${basePackage}.persist.${entity.name}Repository;
#end

#if( !$entity.relations.isEmpty() )  
import java.util.Set;
#end

#foreach ($import in $entity.imports )
import ${import};
#end

/**
 * Transfer object JSON contract for the ${entity.name} application entity.
#if ($entity.documentation)
 * ${entity.documentation}
#end
 *
 * Generated Code - DO NOT MODIFY
 *
 * Generated from: ${templateName}
 */
#if($entity.isChildOfNonPersistentParentEntity())
public abstract class ${entity.name}BaseMixIn extends ${entity.getParent().getType()}MixIn {
#else
public abstract class ${entity.name}BaseMixIn {
#end

	@JsonIgnore
	protected abstract Logger getLogger();

#if (!$entity.isTransient() && !$entity.isNonPersistentParentEntity())
	@JsonIgnore
	private ${entity.name}Repository repository;
#end
	
#if ( $entity.hasIdentifier() )
	@JsonProperty
	private ${entity.identifier.javaType} ${entity.identifier.name};
#end
#foreach ( $field in $entity.fields )
	@JsonProperty	
	private ${field.javaType} ${field.name};
	
	@JsonProperty("${field.name}")
	public abstract ${field.javaType} get${field.capitalizedName}();
#end
#foreach ($relation in $entity.relations)
	@JsonManagedReference(value="${entity.name}-${relation.type}")
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	private Set<${relation.type}BO> ${relation.uncapitalizedType}s;
#end
#foreach ($inverseRelation in $entity.inverseRelations)
	@JsonBackReference(value="${inverseRelation.name}-${entity.name}")
	private ${inverseRelation.name}BO parent${inverseRelation.name};
	
	@JsonIgnore
	public abstract ${inverseRelation.name}BO get${inverseRelation.name}();
	
	@JsonIgnore
	public abstract void set${inverseRelation.name}(${inverseRelation.name}BO parent);	
#end

#foreach ($reference in $entity.references)
  #if (!$reference.isExternal())
	@JsonProperty
	private ${reference.type}BO ${reference.name};
  #else
    #if($reference.foreignKeyFields.iterator().hasNext())
  	@JsonProperty
  	private ${reference.foreignKeyFields.iterator().next().javaType}	${reference.name}Key;
  	#end
  #end
#end

#if ($entity.hasIdentifier())
	@JsonIgnore
	public abstract ${entity.identifier.javaType} getKey();
	
	@JsonIgnore
	public abstract void setKey(${entity.identifier.javaType} ${entity.identifier.name});
	
#end
	
}
